
ITI_SPI_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00002c0a  00002c9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800074  00800074  00002cb2  2**0
                  ALLOC
  3 .stab         00001e78  00000000  00000000  00002cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d69  00000000  00000000  00004b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005895  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000059d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005b45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000778e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008679  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009428  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009588  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009815  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009fe3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e0       	ldi	r30, 0x0A	; 10
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 37       	cpi	r26, 0x76	; 118
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <main>
      8a:	0c 94 03 16 	jmp	0x2c06	; 0x2c06 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cc 15 	jmp	0x2b98	; 0x2b98 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e8 15 	jmp	0x2bd0	; 0x2bd0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d8 15 	jmp	0x2bb0	; 0x2bb0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d8 15 	jmp	0x2bb0	; 0x2bb0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cc 15 	jmp	0x2b98	; 0x2b98 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e8 15 	jmp	0x2bd0	; 0x2bd0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d8 15 	jmp	0x2bb0	; 0x2bb0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d8 15 	jmp	0x2bb0	; 0x2bb0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d8 15 	jmp	0x2bb0	; 0x2bb0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f4 15 	jmp	0x2be8	; 0x2be8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 dc 15 	jmp	0x2bb8	; 0x2bb8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f8 15 	jmp	0x2bf0	; 0x2bf0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_voidInit>:
#include "DIO_cfg.h"
#include "DIO_priv.h"


void DIO_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
   DDRA = CONC(DIO_PIN_DIR_7 ,DIO_PIN_DIR_6 ,DIO_PIN_DIR_5 ,DIO_PIN_DIR_4 ,DIO_PIN_DIR_3 ,DIO_PIN_DIR_2 ,DIO_PIN_DIR_1 ,DIO_PIN_DIR_0 );
     b4e:	ea e3       	ldi	r30, 0x3A	; 58
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8f ef       	ldi	r24, 0xFF	; 255
     b54:	80 83       	st	Z, r24
   DDRB = CONC(DIO_PIN_DIR_15,DIO_PIN_DIR_14,DIO_PIN_DIR_13,DIO_PIN_DIR_12,DIO_PIN_DIR_11,DIO_PIN_DIR_10,DIO_PIN_DIR_9 ,DIO_PIN_DIR_8 );
     b56:	e7 e3       	ldi	r30, 0x37	; 55
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	8f e4       	ldi	r24, 0x4F	; 79
     b5c:	80 83       	st	Z, r24
   DDRC = CONC(DIO_PIN_DIR_23,DIO_PIN_DIR_22,DIO_PIN_DIR_21,DIO_PIN_DIR_20,DIO_PIN_DIR_19,DIO_PIN_DIR_18,DIO_PIN_DIR_17,DIO_PIN_DIR_16);
     b5e:	e4 e3       	ldi	r30, 0x34	; 52
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	8f ef       	ldi	r24, 0xFF	; 255
     b64:	80 83       	st	Z, r24
   DDRD = CONC(DIO_PIN_DIR_31,DIO_PIN_DIR_30,DIO_PIN_DIR_29,DIO_PIN_DIR_28,DIO_PIN_DIR_27,DIO_PIN_DIR_26,DIO_PIN_DIR_25,DIO_PIN_DIR_24);
     b66:	e1 e3       	ldi	r30, 0x31	; 49
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	8f ef       	ldi	r24, 0xFF	; 255
     b6c:	80 83       	st	Z, r24

}
     b6e:	cf 91       	pop	r28
     b70:	df 91       	pop	r29
     b72:	08 95       	ret

00000b74 <DIO_enuWritePin>:

tenuErrorStatus DIO_enuWritePin(uint8 u8PinNumCpy,uint8 u8PinValueCpy)
{
     b74:	df 93       	push	r29
     b76:	cf 93       	push	r28
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
     b7c:	2b 97       	sbiw	r28, 0x0b	; 11
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	f8 94       	cli
     b82:	de bf       	out	0x3e, r29	; 62
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	cd bf       	out	0x3d, r28	; 61
     b88:	8a 83       	std	Y+2, r24	; 0x02
     b8a:	6b 83       	std	Y+3, r22	; 0x03
	
	tenuErrorStatus enuReturnStateLoc = EOK ;
     b8c:	19 82       	std	Y+1, r1	; 0x01
	if (u8PinNumCpy >= DIO_PIN_NUM_0 && u8PinNumCpy <= DIO_PIN_NUM_7)
     b8e:	8a 81       	ldd	r24, Y+2	; 0x02
     b90:	88 30       	cpi	r24, 0x08	; 8
     b92:	d8 f5       	brcc	.+118    	; 0xc0a <DIO_enuWritePin+0x96>
	{
		switch (u8PinValueCpy)
     b94:	8b 81       	ldd	r24, Y+3	; 0x03
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	3b 87       	std	Y+11, r19	; 0x0b
     b9c:	2a 87       	std	Y+10, r18	; 0x0a
     b9e:	8a 85       	ldd	r24, Y+10	; 0x0a
     ba0:	9b 85       	ldd	r25, Y+11	; 0x0b
     ba2:	00 97       	sbiw	r24, 0x00	; 0
     ba4:	31 f0       	breq	.+12     	; 0xbb2 <DIO_enuWritePin+0x3e>
     ba6:	2a 85       	ldd	r18, Y+10	; 0x0a
     ba8:	3b 85       	ldd	r19, Y+11	; 0x0b
     baa:	21 30       	cpi	r18, 0x01	; 1
     bac:	31 05       	cpc	r19, r1
     bae:	b1 f0       	breq	.+44     	; 0xbdc <DIO_enuWritePin+0x68>
     bb0:	29 c0       	rjmp	.+82     	; 0xc04 <DIO_enuWritePin+0x90>
		{
			case DIO_LOW :
			 CLR_BIT (ODRA ,  u8PinNumCpy);
     bb2:	ab e3       	ldi	r26, 0x3B	; 59
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	eb e3       	ldi	r30, 0x3B	; 59
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	48 2f       	mov	r20, r24
     bbe:	8a 81       	ldd	r24, Y+2	; 0x02
     bc0:	28 2f       	mov	r18, r24
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	02 2e       	mov	r0, r18
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <DIO_enuWritePin+0x5c>
     bcc:	88 0f       	add	r24, r24
     bce:	99 1f       	adc	r25, r25
     bd0:	0a 94       	dec	r0
     bd2:	e2 f7       	brpl	.-8      	; 0xbcc <DIO_enuWritePin+0x58>
     bd4:	80 95       	com	r24
     bd6:	84 23       	and	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	f4 c0       	rjmp	.+488    	; 0xdc4 <DIO_enuWritePin+0x250>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRA , u8PinNumCpy);
     bdc:	ab e3       	ldi	r26, 0x3B	; 59
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	eb e3       	ldi	r30, 0x3B	; 59
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <DIO_enuWritePin+0x86>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <DIO_enuWritePin+0x82>
     bfe:	84 2b       	or	r24, r20
     c00:	8c 93       	st	X, r24
     c02:	e0 c0       	rjmp	.+448    	; 0xdc4 <DIO_enuWritePin+0x250>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
     c04:	82 e0       	ldi	r24, 0x02	; 2
     c06:	89 83       	std	Y+1, r24	; 0x01
     c08:	dd c0       	rjmp	.+442    	; 0xdc4 <DIO_enuWritePin+0x250>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_8 && u8PinNumCpy <= DIO_PIN_NUM_15)
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	88 30       	cpi	r24, 0x08	; 8
     c0e:	08 f4       	brcc	.+2      	; 0xc12 <DIO_enuWritePin+0x9e>
     c10:	45 c0       	rjmp	.+138    	; 0xc9c <DIO_enuWritePin+0x128>
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	80 31       	cpi	r24, 0x10	; 16
     c16:	08 f0       	brcs	.+2      	; 0xc1a <DIO_enuWritePin+0xa6>
     c18:	41 c0       	rjmp	.+130    	; 0xc9c <DIO_enuWritePin+0x128>
	{
		switch (u8PinValueCpy)
     c1a:	8b 81       	ldd	r24, Y+3	; 0x03
     c1c:	28 2f       	mov	r18, r24
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	39 87       	std	Y+9, r19	; 0x09
     c22:	28 87       	std	Y+8, r18	; 0x08
     c24:	88 85       	ldd	r24, Y+8	; 0x08
     c26:	99 85       	ldd	r25, Y+9	; 0x09
     c28:	00 97       	sbiw	r24, 0x00	; 0
     c2a:	31 f0       	breq	.+12     	; 0xc38 <DIO_enuWritePin+0xc4>
     c2c:	28 85       	ldd	r18, Y+8	; 0x08
     c2e:	39 85       	ldd	r19, Y+9	; 0x09
     c30:	21 30       	cpi	r18, 0x01	; 1
     c32:	31 05       	cpc	r19, r1
     c34:	c9 f0       	breq	.+50     	; 0xc68 <DIO_enuWritePin+0xf4>
     c36:	2f c0       	rjmp	.+94     	; 0xc96 <DIO_enuWritePin+0x122>
		{
			case DIO_LOW :
			 CLR_BIT (ODRB ,  u8PinNumCpy%8);
     c38:	a8 e3       	ldi	r26, 0x38	; 56
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	e8 e3       	ldi	r30, 0x38	; 56
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	48 2f       	mov	r20, r24
     c44:	8a 81       	ldd	r24, Y+2	; 0x02
     c46:	88 2f       	mov	r24, r24
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	9c 01       	movw	r18, r24
     c4c:	27 70       	andi	r18, 0x07	; 7
     c4e:	30 70       	andi	r19, 0x00	; 0
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	02 2e       	mov	r0, r18
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <DIO_enuWritePin+0xe8>
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	0a 94       	dec	r0
     c5e:	e2 f7       	brpl	.-8      	; 0xc58 <DIO_enuWritePin+0xe4>
     c60:	80 95       	com	r24
     c62:	84 23       	and	r24, r20
     c64:	8c 93       	st	X, r24
     c66:	ae c0       	rjmp	.+348    	; 0xdc4 <DIO_enuWritePin+0x250>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRB , u8PinNumCpy%8);
     c68:	a8 e3       	ldi	r26, 0x38	; 56
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e8 e3       	ldi	r30, 0x38	; 56
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	48 2f       	mov	r20, r24
     c74:	8a 81       	ldd	r24, Y+2	; 0x02
     c76:	88 2f       	mov	r24, r24
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	9c 01       	movw	r18, r24
     c7c:	27 70       	andi	r18, 0x07	; 7
     c7e:	30 70       	andi	r19, 0x00	; 0
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	02 2e       	mov	r0, r18
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <DIO_enuWritePin+0x118>
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	0a 94       	dec	r0
     c8e:	e2 f7       	brpl	.-8      	; 0xc88 <DIO_enuWritePin+0x114>
     c90:	84 2b       	or	r24, r20
     c92:	8c 93       	st	X, r24
     c94:	97 c0       	rjmp	.+302    	; 0xdc4 <DIO_enuWritePin+0x250>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
     c96:	82 e0       	ldi	r24, 0x02	; 2
     c98:	89 83       	std	Y+1, r24	; 0x01
     c9a:	94 c0       	rjmp	.+296    	; 0xdc4 <DIO_enuWritePin+0x250>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_16 && u8PinNumCpy <= DIO_PIN_NUM_23)
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	80 31       	cpi	r24, 0x10	; 16
     ca0:	08 f4       	brcc	.+2      	; 0xca4 <DIO_enuWritePin+0x130>
     ca2:	45 c0       	rjmp	.+138    	; 0xd2e <DIO_enuWritePin+0x1ba>
     ca4:	8a 81       	ldd	r24, Y+2	; 0x02
     ca6:	88 31       	cpi	r24, 0x18	; 24
     ca8:	08 f0       	brcs	.+2      	; 0xcac <DIO_enuWritePin+0x138>
     caa:	41 c0       	rjmp	.+130    	; 0xd2e <DIO_enuWritePin+0x1ba>
	{
		switch (u8PinValueCpy)
     cac:	8b 81       	ldd	r24, Y+3	; 0x03
     cae:	28 2f       	mov	r18, r24
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	3f 83       	std	Y+7, r19	; 0x07
     cb4:	2e 83       	std	Y+6, r18	; 0x06
     cb6:	8e 81       	ldd	r24, Y+6	; 0x06
     cb8:	9f 81       	ldd	r25, Y+7	; 0x07
     cba:	00 97       	sbiw	r24, 0x00	; 0
     cbc:	31 f0       	breq	.+12     	; 0xcca <DIO_enuWritePin+0x156>
     cbe:	2e 81       	ldd	r18, Y+6	; 0x06
     cc0:	3f 81       	ldd	r19, Y+7	; 0x07
     cc2:	21 30       	cpi	r18, 0x01	; 1
     cc4:	31 05       	cpc	r19, r1
     cc6:	c9 f0       	breq	.+50     	; 0xcfa <DIO_enuWritePin+0x186>
     cc8:	2f c0       	rjmp	.+94     	; 0xd28 <DIO_enuWritePin+0x1b4>
		{
			case DIO_LOW :
			 CLR_BIT (ODRC ,  u8PinNumCpy%8);
     cca:	a5 e3       	ldi	r26, 0x35	; 53
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e5 e3       	ldi	r30, 0x35	; 53
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	48 2f       	mov	r20, r24
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	88 2f       	mov	r24, r24
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	9c 01       	movw	r18, r24
     cde:	27 70       	andi	r18, 0x07	; 7
     ce0:	30 70       	andi	r19, 0x00	; 0
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	02 2e       	mov	r0, r18
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <DIO_enuWritePin+0x17a>
     cea:	88 0f       	add	r24, r24
     cec:	99 1f       	adc	r25, r25
     cee:	0a 94       	dec	r0
     cf0:	e2 f7       	brpl	.-8      	; 0xcea <DIO_enuWritePin+0x176>
     cf2:	80 95       	com	r24
     cf4:	84 23       	and	r24, r20
     cf6:	8c 93       	st	X, r24
     cf8:	65 c0       	rjmp	.+202    	; 0xdc4 <DIO_enuWritePin+0x250>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRC , u8PinNumCpy%8);
     cfa:	a5 e3       	ldi	r26, 0x35	; 53
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e5 e3       	ldi	r30, 0x35	; 53
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	48 2f       	mov	r20, r24
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	88 2f       	mov	r24, r24
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	9c 01       	movw	r18, r24
     d0e:	27 70       	andi	r18, 0x07	; 7
     d10:	30 70       	andi	r19, 0x00	; 0
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	02 2e       	mov	r0, r18
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <DIO_enuWritePin+0x1aa>
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	0a 94       	dec	r0
     d20:	e2 f7       	brpl	.-8      	; 0xd1a <DIO_enuWritePin+0x1a6>
     d22:	84 2b       	or	r24, r20
     d24:	8c 93       	st	X, r24
     d26:	4e c0       	rjmp	.+156    	; 0xdc4 <DIO_enuWritePin+0x250>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
     d28:	82 e0       	ldi	r24, 0x02	; 2
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	4b c0       	rjmp	.+150    	; 0xdc4 <DIO_enuWritePin+0x250>
		}
	}
	else if (u8PinNumCpy >= DIO_PIN_NUM_24 && u8PinNumCpy <= DIO_PIN_NUM_31)
     d2e:	8a 81       	ldd	r24, Y+2	; 0x02
     d30:	88 31       	cpi	r24, 0x18	; 24
     d32:	08 f4       	brcc	.+2      	; 0xd36 <DIO_enuWritePin+0x1c2>
     d34:	45 c0       	rjmp	.+138    	; 0xdc0 <DIO_enuWritePin+0x24c>
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	80 32       	cpi	r24, 0x20	; 32
     d3a:	08 f0       	brcs	.+2      	; 0xd3e <DIO_enuWritePin+0x1ca>
     d3c:	41 c0       	rjmp	.+130    	; 0xdc0 <DIO_enuWritePin+0x24c>
	{
		switch (u8PinValueCpy)
     d3e:	8b 81       	ldd	r24, Y+3	; 0x03
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	3d 83       	std	Y+5, r19	; 0x05
     d46:	2c 83       	std	Y+4, r18	; 0x04
     d48:	8c 81       	ldd	r24, Y+4	; 0x04
     d4a:	9d 81       	ldd	r25, Y+5	; 0x05
     d4c:	00 97       	sbiw	r24, 0x00	; 0
     d4e:	31 f0       	breq	.+12     	; 0xd5c <DIO_enuWritePin+0x1e8>
     d50:	2c 81       	ldd	r18, Y+4	; 0x04
     d52:	3d 81       	ldd	r19, Y+5	; 0x05
     d54:	21 30       	cpi	r18, 0x01	; 1
     d56:	31 05       	cpc	r19, r1
     d58:	c9 f0       	breq	.+50     	; 0xd8c <DIO_enuWritePin+0x218>
     d5a:	2f c0       	rjmp	.+94     	; 0xdba <DIO_enuWritePin+0x246>
		{
			case DIO_LOW :
			 CLR_BIT (ODRD ,  u8PinNumCpy%8);
     d5c:	a2 e3       	ldi	r26, 0x32	; 50
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e2 e3       	ldi	r30, 0x32	; 50
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	48 2f       	mov	r20, r24
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	88 2f       	mov	r24, r24
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	9c 01       	movw	r18, r24
     d70:	27 70       	andi	r18, 0x07	; 7
     d72:	30 70       	andi	r19, 0x00	; 0
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	02 2e       	mov	r0, r18
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <DIO_enuWritePin+0x20c>
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	0a 94       	dec	r0
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <DIO_enuWritePin+0x208>
     d84:	80 95       	com	r24
     d86:	84 23       	and	r24, r20
     d88:	8c 93       	st	X, r24
     d8a:	1c c0       	rjmp	.+56     	; 0xdc4 <DIO_enuWritePin+0x250>
			break;
			case DIO_HIGH :
			 SET_BIT(ODRD , u8PinNumCpy%8);
     d8c:	a2 e3       	ldi	r26, 0x32	; 50
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e2 e3       	ldi	r30, 0x32	; 50
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	48 2f       	mov	r20, r24
     d98:	8a 81       	ldd	r24, Y+2	; 0x02
     d9a:	88 2f       	mov	r24, r24
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	9c 01       	movw	r18, r24
     da0:	27 70       	andi	r18, 0x07	; 7
     da2:	30 70       	andi	r19, 0x00	; 0
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	02 2e       	mov	r0, r18
     daa:	02 c0       	rjmp	.+4      	; 0xdb0 <DIO_enuWritePin+0x23c>
     dac:	88 0f       	add	r24, r24
     dae:	99 1f       	adc	r25, r25
     db0:	0a 94       	dec	r0
     db2:	e2 f7       	brpl	.-8      	; 0xdac <DIO_enuWritePin+0x238>
     db4:	84 2b       	or	r24, r20
     db6:	8c 93       	st	X, r24
     db8:	05 c0       	rjmp	.+10     	; 0xdc4 <DIO_enuWritePin+0x250>
			break ;
			default :
			enuReturnStateLoc = PARAM_OUT_RANGE ;
     dba:	82 e0       	ldi	r24, 0x02	; 2
     dbc:	89 83       	std	Y+1, r24	; 0x01
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <DIO_enuWritePin+0x250>
		}
	}
	else
	{
		enuReturnStateLoc = PARAM_OUT_RANGE ;
     dc0:	82 e0       	ldi	r24, 0x02	; 2
     dc2:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return enuReturnStateLoc ;
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
	
}     
     dc6:	2b 96       	adiw	r28, 0x0b	; 11
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	cf 91       	pop	r28
     dd4:	df 91       	pop	r29
     dd6:	08 95       	ret

00000dd8 <DIO_enuReadPin>:

tenuErrorStatus DIO_enuReadPin(uint8 u8PinNumCpy ,uint8 * pu8PinValueCpy )
{
     dd8:	df 93       	push	r29
     dda:	cf 93       	push	r28
     ddc:	00 d0       	rcall	.+0      	; 0xdde <DIO_enuReadPin+0x6>
     dde:	00 d0       	rcall	.+0      	; 0xde0 <DIO_enuReadPin+0x8>
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	8a 83       	std	Y+2, r24	; 0x02
     de6:	7c 83       	std	Y+4, r23	; 0x04
     de8:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus  enuReturnStateLoc = EOK;
     dea:	19 82       	std	Y+1, r1	; 0x01
	
	if (pu8PinValueCpy != NULL_PTR)
     dec:	8b 81       	ldd	r24, Y+3	; 0x03
     dee:	9c 81       	ldd	r25, Y+4	; 0x04
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	09 f4       	brne	.+2      	; 0xdf6 <DIO_enuReadPin+0x1e>
     df4:	6e c0       	rjmp	.+220    	; 0xed2 <DIO_enuReadPin+0xfa>
	{
		//IDR
		if (u8PinNumCpy >= DIO_PIN_NUM_0 && u8PinNumCpy <= DIO_PIN_NUM_7)
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	88 30       	cpi	r24, 0x08	; 8
     dfa:	a0 f4       	brcc	.+40     	; 0xe24 <DIO_enuReadPin+0x4c>
		{
			*pu8PinValueCpy  = GET_BIT(IDRA , u8PinNumCpy);
     dfc:	e9 e3       	ldi	r30, 0x39	; 57
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	88 2f       	mov	r24, r24
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	a9 01       	movw	r20, r18
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <DIO_enuReadPin+0x3c>
     e10:	55 95       	asr	r21
     e12:	47 95       	ror	r20
     e14:	8a 95       	dec	r24
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <DIO_enuReadPin+0x38>
     e18:	ca 01       	movw	r24, r20
     e1a:	81 70       	andi	r24, 0x01	; 1
     e1c:	eb 81       	ldd	r30, Y+3	; 0x03
     e1e:	fc 81       	ldd	r31, Y+4	; 0x04
     e20:	80 83       	st	Z, r24
     e22:	59 c0       	rjmp	.+178    	; 0xed6 <DIO_enuReadPin+0xfe>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_8 && u8PinNumCpy <= DIO_PIN_NUM_15)
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	88 30       	cpi	r24, 0x08	; 8
     e28:	c8 f0       	brcs	.+50     	; 0xe5c <DIO_enuReadPin+0x84>
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	80 31       	cpi	r24, 0x10	; 16
     e2e:	b0 f4       	brcc	.+44     	; 0xe5c <DIO_enuReadPin+0x84>
		{
			*pu8PinValueCpy  = GET_BIT(IDRB , u8PinNumCpy%8);		
     e30:	e6 e3       	ldi	r30, 0x36	; 54
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	88 2f       	mov	r24, r24
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	87 70       	andi	r24, 0x07	; 7
     e42:	90 70       	andi	r25, 0x00	; 0
     e44:	a9 01       	movw	r20, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <DIO_enuReadPin+0x74>
     e48:	55 95       	asr	r21
     e4a:	47 95       	ror	r20
     e4c:	8a 95       	dec	r24
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <DIO_enuReadPin+0x70>
     e50:	ca 01       	movw	r24, r20
     e52:	81 70       	andi	r24, 0x01	; 1
     e54:	eb 81       	ldd	r30, Y+3	; 0x03
     e56:	fc 81       	ldd	r31, Y+4	; 0x04
     e58:	80 83       	st	Z, r24
     e5a:	3d c0       	rjmp	.+122    	; 0xed6 <DIO_enuReadPin+0xfe>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_16 && u8PinNumCpy <= DIO_PIN_NUM_23)
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	80 31       	cpi	r24, 0x10	; 16
     e60:	c8 f0       	brcs	.+50     	; 0xe94 <DIO_enuReadPin+0xbc>
     e62:	8a 81       	ldd	r24, Y+2	; 0x02
     e64:	88 31       	cpi	r24, 0x18	; 24
     e66:	b0 f4       	brcc	.+44     	; 0xe94 <DIO_enuReadPin+0xbc>
		{
			*pu8PinValueCpy  = GET_BIT(IDRC , u8PinNumCpy%8);
     e68:	e3 e3       	ldi	r30, 0x33	; 51
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	28 2f       	mov	r18, r24
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	88 2f       	mov	r24, r24
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	87 70       	andi	r24, 0x07	; 7
     e7a:	90 70       	andi	r25, 0x00	; 0
     e7c:	a9 01       	movw	r20, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_enuReadPin+0xac>
     e80:	55 95       	asr	r21
     e82:	47 95       	ror	r20
     e84:	8a 95       	dec	r24
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_enuReadPin+0xa8>
     e88:	ca 01       	movw	r24, r20
     e8a:	81 70       	andi	r24, 0x01	; 1
     e8c:	eb 81       	ldd	r30, Y+3	; 0x03
     e8e:	fc 81       	ldd	r31, Y+4	; 0x04
     e90:	80 83       	st	Z, r24
     e92:	21 c0       	rjmp	.+66     	; 0xed6 <DIO_enuReadPin+0xfe>
		}
		else if (u8PinNumCpy >= DIO_PIN_NUM_24 && u8PinNumCpy <= DIO_PIN_NUM_31)
     e94:	8a 81       	ldd	r24, Y+2	; 0x02
     e96:	88 31       	cpi	r24, 0x18	; 24
     e98:	c8 f0       	brcs	.+50     	; 0xecc <DIO_enuReadPin+0xf4>
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	80 32       	cpi	r24, 0x20	; 32
     e9e:	b0 f4       	brcc	.+44     	; 0xecc <DIO_enuReadPin+0xf4>
		{
			*pu8PinValueCpy  = GET_BIT(IDRD , u8PinNumCpy%8);
     ea0:	e0 e3       	ldi	r30, 0x30	; 48
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	8a 81       	ldd	r24, Y+2	; 0x02
     eac:	88 2f       	mov	r24, r24
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	87 70       	andi	r24, 0x07	; 7
     eb2:	90 70       	andi	r25, 0x00	; 0
     eb4:	a9 01       	movw	r20, r18
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <DIO_enuReadPin+0xe4>
     eb8:	55 95       	asr	r21
     eba:	47 95       	ror	r20
     ebc:	8a 95       	dec	r24
     ebe:	e2 f7       	brpl	.-8      	; 0xeb8 <DIO_enuReadPin+0xe0>
     ec0:	ca 01       	movw	r24, r20
     ec2:	81 70       	andi	r24, 0x01	; 1
     ec4:	eb 81       	ldd	r30, Y+3	; 0x03
     ec6:	fc 81       	ldd	r31, Y+4	; 0x04
     ec8:	80 83       	st	Z, r24
     eca:	05 c0       	rjmp	.+10     	; 0xed6 <DIO_enuReadPin+0xfe>
		}
		else
		{
			enuReturnStateLoc = PARAM_OUT_RANGE ;
     ecc:	82 e0       	ldi	r24, 0x02	; 2
     ece:	89 83       	std	Y+1, r24	; 0x01
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <DIO_enuReadPin+0xfe>
		}
	}
	else
	{
		enuReturnStateLoc = PARAM_NULL_PTR ;
     ed2:	83 e0       	ldi	r24, 0x03	; 3
     ed4:	89 83       	std	Y+1, r24	; 0x01
	}
	
	return enuReturnStateLoc ;
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
	
}          
     ed8:	0f 90       	pop	r0
     eda:	0f 90       	pop	r0
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <DIO_enuStatePullup>:

tenuErrorStatus DIO_enuStatePullup(uint8 u8PinNumCpy, uint8 u8StateCpy)        
{
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	00 d0       	rcall	.+0      	; 0xeec <DIO_enuStatePullup+0x6>
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	89 83       	std	Y+1, r24	; 0x01
     ef2:	6a 83       	std	Y+2, r22	; 0x02
   return DIO_enuWritePin(u8PinNumCpy,u8StateCpy);	
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	6a 81       	ldd	r22, Y+2	; 0x02
     ef8:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
}
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	08 95       	ret

00000f06 <DIO_enuWriteGroup>:

tenuErrorStatus DIO_enuWriteGroup(uint8 *pau8PinNumCpy,uint8 * pau8PinValueCpy , uint8 u8SizeCpy)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	cd b7       	in	r28, 0x3d	; 61
     f0c:	de b7       	in	r29, 0x3e	; 62
     f0e:	28 97       	sbiw	r28, 0x08	; 8
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
     f1a:	9c 83       	std	Y+4, r25	; 0x04
     f1c:	8b 83       	std	Y+3, r24	; 0x03
     f1e:	7e 83       	std	Y+6, r23	; 0x06
     f20:	6d 83       	std	Y+5, r22	; 0x05
     f22:	4f 83       	std	Y+7, r20	; 0x07
	tenuErrorStatus enuReturnStateLoc = EOK ;
     f24:	1a 82       	std	Y+2, r1	; 0x02
	uint8 u8CntrLoc ;
	for (u8CntrLoc = 0 ; u8CntrLoc< u8SizeCpy ; u8CntrLoc++)
     f26:	19 82       	std	Y+1, r1	; 0x01
     f28:	1d c0       	rjmp	.+58     	; 0xf64 <DIO_enuWriteGroup+0x5e>
	{
		enuReturnStateLoc = DIO_enuWritePin(pau8PinNumCpy[u8CntrLoc],pau8PinValueCpy[u8CntrLoc]);
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	9c 81       	ldd	r25, Y+4	; 0x04
     f34:	fc 01       	movw	r30, r24
     f36:	e2 0f       	add	r30, r18
     f38:	f3 1f       	adc	r31, r19
     f3a:	40 81       	ld	r20, Z
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	8d 81       	ldd	r24, Y+5	; 0x05
     f44:	9e 81       	ldd	r25, Y+6	; 0x06
     f46:	fc 01       	movw	r30, r24
     f48:	e2 0f       	add	r30, r18
     f4a:	f3 1f       	adc	r31, r19
     f4c:	90 81       	ld	r25, Z
     f4e:	84 2f       	mov	r24, r20
     f50:	69 2f       	mov	r22, r25
     f52:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
     f56:	8a 83       	std	Y+2, r24	; 0x02
		if (enuReturnStateLoc !=EOK)
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	88 23       	and	r24, r24
     f5c:	39 f4       	brne	.+14     	; 0xf6c <DIO_enuWriteGroup+0x66>

tenuErrorStatus DIO_enuWriteGroup(uint8 *pau8PinNumCpy,uint8 * pau8PinValueCpy , uint8 u8SizeCpy)
{
	tenuErrorStatus enuReturnStateLoc = EOK ;
	uint8 u8CntrLoc ;
	for (u8CntrLoc = 0 ; u8CntrLoc< u8SizeCpy ; u8CntrLoc++)
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	8f 5f       	subi	r24, 0xFF	; 255
     f62:	89 83       	std	Y+1, r24	; 0x01
     f64:	99 81       	ldd	r25, Y+1	; 0x01
     f66:	8f 81       	ldd	r24, Y+7	; 0x07
     f68:	98 17       	cp	r25, r24
     f6a:	f8 f2       	brcs	.-66     	; 0xf2a <DIO_enuWriteGroup+0x24>
		if (enuReturnStateLoc !=EOK)
		{
			break;
		}
	}
}
     f6c:	28 96       	adiw	r28, 0x08	; 8
     f6e:	0f b6       	in	r0, 0x3f	; 63
     f70:	f8 94       	cli
     f72:	de bf       	out	0x3e, r29	; 62
     f74:	0f be       	out	0x3f, r0	; 63
     f76:	cd bf       	out	0x3d, r28	; 61
     f78:	cf 91       	pop	r28
     f7a:	df 91       	pop	r29
     f7c:	08 95       	ret

00000f7e <LCD_voidInit>:
#include "LCD_cfg.h"
#include "LCD_priv.h"


void LCD_voidInit(void)
{
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	ce 58       	subi	r28, 0x8E	; 142
     f8c:	d0 40       	sbci	r29, 0x00	; 0
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	de bf       	out	0x3e, r29	; 62
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	cd bf       	out	0x3d, r28	; 61
	uint8 u8CntrLoc = 0 ;
     f98:	fe 01       	movw	r30, r28
     f9a:	e2 57       	subi	r30, 0x72	; 114
     f9c:	ff 4f       	sbci	r31, 0xFF	; 255
     f9e:	10 82       	st	Z, r1
	uint8 u8CmdLoc  = 0 ;
     fa0:	fe 01       	movw	r30, r28
     fa2:	e3 57       	subi	r30, 0x73	; 115
     fa4:	ff 4f       	sbci	r31, 0xFF	; 255
     fa6:	10 82       	st	Z, r1
	for ( u8CntrLoc = 0 ; u8CntrLoc < LCD_MAX_NUM ; u8CntrLoc ++)
     fa8:	fe 01       	movw	r30, r28
     faa:	e2 57       	subi	r30, 0x72	; 114
     fac:	ff 4f       	sbci	r31, 0xFF	; 255
     fae:	10 82       	st	Z, r1
     fb0:	0c 94 f8 0f 	jmp	0x1ff0	; 0x1ff0 <LCD_voidInit+0x1072>
	{
		if (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8Mode  == LCD_8BIT_MODE )
     fb4:	fe 01       	movw	r30, r28
     fb6:	e2 57       	subi	r30, 0x72	; 114
     fb8:	ff 4f       	sbci	r31, 0xFF	; 255
     fba:	80 81       	ld	r24, Z
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	c9 01       	movw	r24, r18
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	82 0f       	add	r24, r18
     fc8:	93 1f       	adc	r25, r19
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	fc 01       	movw	r30, r24
     fd4:	e8 59       	subi	r30, 0x98	; 152
     fd6:	ff 4f       	sbci	r31, 0xFF	; 255
     fd8:	80 81       	ld	r24, Z
     fda:	81 70       	andi	r24, 0x01	; 1
     fdc:	81 30       	cpi	r24, 0x01	; 1
     fde:	09 f0       	breq	.+2      	; 0xfe2 <LCD_voidInit+0x64>
     fe0:	75 c4       	rjmp	.+2282   	; 0x18cc <LCD_voidInit+0x94e>
     fe2:	fe 01       	movw	r30, r28
     fe4:	e7 57       	subi	r30, 0x77	; 119
     fe6:	ff 4f       	sbci	r31, 0xFF	; 255
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	a0 ef       	ldi	r26, 0xF0	; 240
     fee:	b1 e4       	ldi	r27, 0x41	; 65
     ff0:	80 83       	st	Z, r24
     ff2:	91 83       	std	Z+1, r25	; 0x01
     ff4:	a2 83       	std	Z+2, r26	; 0x02
     ff6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff8:	8e 01       	movw	r16, r28
     ffa:	0b 57       	subi	r16, 0x7B	; 123
     ffc:	1f 4f       	sbci	r17, 0xFF	; 255
     ffe:	fe 01       	movw	r30, r28
    1000:	e7 57       	subi	r30, 0x77	; 119
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	60 81       	ld	r22, Z
    1006:	71 81       	ldd	r23, Z+1	; 0x01
    1008:	82 81       	ldd	r24, Z+2	; 0x02
    100a:	93 81       	ldd	r25, Z+3	; 0x03
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	4a ef       	ldi	r20, 0xFA	; 250
    1012:	54 e4       	ldi	r21, 0x44	; 68
    1014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	f8 01       	movw	r30, r16
    101e:	80 83       	st	Z, r24
    1020:	91 83       	std	Z+1, r25	; 0x01
    1022:	a2 83       	std	Z+2, r26	; 0x02
    1024:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1026:	fe 01       	movw	r30, r28
    1028:	eb 57       	subi	r30, 0x7B	; 123
    102a:	ff 4f       	sbci	r31, 0xFF	; 255
    102c:	60 81       	ld	r22, Z
    102e:	71 81       	ldd	r23, Z+1	; 0x01
    1030:	82 81       	ldd	r24, Z+2	; 0x02
    1032:	93 81       	ldd	r25, Z+3	; 0x03
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	40 e8       	ldi	r20, 0x80	; 128
    103a:	5f e3       	ldi	r21, 0x3F	; 63
    103c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1040:	88 23       	and	r24, r24
    1042:	44 f4       	brge	.+16     	; 0x1054 <LCD_voidInit+0xd6>
		__ticks = 1;
    1044:	fe 01       	movw	r30, r28
    1046:	ed 57       	subi	r30, 0x7D	; 125
    1048:	ff 4f       	sbci	r31, 0xFF	; 255
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	91 83       	std	Z+1, r25	; 0x01
    1050:	80 83       	st	Z, r24
    1052:	64 c0       	rjmp	.+200    	; 0x111c <LCD_voidInit+0x19e>
	else if (__tmp > 65535)
    1054:	fe 01       	movw	r30, r28
    1056:	eb 57       	subi	r30, 0x7B	; 123
    1058:	ff 4f       	sbci	r31, 0xFF	; 255
    105a:	60 81       	ld	r22, Z
    105c:	71 81       	ldd	r23, Z+1	; 0x01
    105e:	82 81       	ldd	r24, Z+2	; 0x02
    1060:	93 81       	ldd	r25, Z+3	; 0x03
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	3f ef       	ldi	r19, 0xFF	; 255
    1066:	4f e7       	ldi	r20, 0x7F	; 127
    1068:	57 e4       	ldi	r21, 0x47	; 71
    106a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    106e:	18 16       	cp	r1, r24
    1070:	0c f0       	brlt	.+2      	; 0x1074 <LCD_voidInit+0xf6>
    1072:	43 c0       	rjmp	.+134    	; 0x10fa <LCD_voidInit+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1074:	fe 01       	movw	r30, r28
    1076:	e7 57       	subi	r30, 0x77	; 119
    1078:	ff 4f       	sbci	r31, 0xFF	; 255
    107a:	60 81       	ld	r22, Z
    107c:	71 81       	ldd	r23, Z+1	; 0x01
    107e:	82 81       	ldd	r24, Z+2	; 0x02
    1080:	93 81       	ldd	r25, Z+3	; 0x03
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 e2       	ldi	r20, 0x20	; 32
    1088:	51 e4       	ldi	r21, 0x41	; 65
    108a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	8e 01       	movw	r16, r28
    1094:	0d 57       	subi	r16, 0x7D	; 125
    1096:	1f 4f       	sbci	r17, 0xFF	; 255
    1098:	bc 01       	movw	r22, r24
    109a:	cd 01       	movw	r24, r26
    109c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a0:	dc 01       	movw	r26, r24
    10a2:	cb 01       	movw	r24, r22
    10a4:	f8 01       	movw	r30, r16
    10a6:	91 83       	std	Z+1, r25	; 0x01
    10a8:	80 83       	st	Z, r24
    10aa:	1f c0       	rjmp	.+62     	; 0x10ea <LCD_voidInit+0x16c>
    10ac:	fe 01       	movw	r30, r28
    10ae:	ef 57       	subi	r30, 0x7F	; 127
    10b0:	ff 4f       	sbci	r31, 0xFF	; 255
    10b2:	88 ec       	ldi	r24, 0xC8	; 200
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	91 83       	std	Z+1, r25	; 0x01
    10b8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10ba:	fe 01       	movw	r30, r28
    10bc:	ef 57       	subi	r30, 0x7F	; 127
    10be:	ff 4f       	sbci	r31, 0xFF	; 255
    10c0:	80 81       	ld	r24, Z
    10c2:	91 81       	ldd	r25, Z+1	; 0x01
    10c4:	01 97       	sbiw	r24, 0x01	; 1
    10c6:	f1 f7       	brne	.-4      	; 0x10c4 <LCD_voidInit+0x146>
    10c8:	fe 01       	movw	r30, r28
    10ca:	ef 57       	subi	r30, 0x7F	; 127
    10cc:	ff 4f       	sbci	r31, 0xFF	; 255
    10ce:	91 83       	std	Z+1, r25	; 0x01
    10d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d2:	de 01       	movw	r26, r28
    10d4:	ad 57       	subi	r26, 0x7D	; 125
    10d6:	bf 4f       	sbci	r27, 0xFF	; 255
    10d8:	fe 01       	movw	r30, r28
    10da:	ed 57       	subi	r30, 0x7D	; 125
    10dc:	ff 4f       	sbci	r31, 0xFF	; 255
    10de:	80 81       	ld	r24, Z
    10e0:	91 81       	ldd	r25, Z+1	; 0x01
    10e2:	01 97       	sbiw	r24, 0x01	; 1
    10e4:	11 96       	adiw	r26, 0x01	; 1
    10e6:	9c 93       	st	X, r25
    10e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ea:	fe 01       	movw	r30, r28
    10ec:	ed 57       	subi	r30, 0x7D	; 125
    10ee:	ff 4f       	sbci	r31, 0xFF	; 255
    10f0:	80 81       	ld	r24, Z
    10f2:	91 81       	ldd	r25, Z+1	; 0x01
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	d1 f6       	brne	.-76     	; 0x10ac <LCD_voidInit+0x12e>
    10f8:	27 c0       	rjmp	.+78     	; 0x1148 <LCD_voidInit+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10fa:	8e 01       	movw	r16, r28
    10fc:	0d 57       	subi	r16, 0x7D	; 125
    10fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1100:	fe 01       	movw	r30, r28
    1102:	eb 57       	subi	r30, 0x7B	; 123
    1104:	ff 4f       	sbci	r31, 0xFF	; 255
    1106:	60 81       	ld	r22, Z
    1108:	71 81       	ldd	r23, Z+1	; 0x01
    110a:	82 81       	ldd	r24, Z+2	; 0x02
    110c:	93 81       	ldd	r25, Z+3	; 0x03
    110e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1112:	dc 01       	movw	r26, r24
    1114:	cb 01       	movw	r24, r22
    1116:	f8 01       	movw	r30, r16
    1118:	91 83       	std	Z+1, r25	; 0x01
    111a:	80 83       	st	Z, r24
    111c:	de 01       	movw	r26, r28
    111e:	a1 58       	subi	r26, 0x81	; 129
    1120:	bf 4f       	sbci	r27, 0xFF	; 255
    1122:	fe 01       	movw	r30, r28
    1124:	ed 57       	subi	r30, 0x7D	; 125
    1126:	ff 4f       	sbci	r31, 0xFF	; 255
    1128:	80 81       	ld	r24, Z
    112a:	91 81       	ldd	r25, Z+1	; 0x01
    112c:	8d 93       	st	X+, r24
    112e:	9c 93       	st	X, r25
    1130:	fe 01       	movw	r30, r28
    1132:	e1 58       	subi	r30, 0x81	; 129
    1134:	ff 4f       	sbci	r31, 0xFF	; 255
    1136:	80 81       	ld	r24, Z
    1138:	91 81       	ldd	r25, Z+1	; 0x01
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	f1 f7       	brne	.-4      	; 0x113a <LCD_voidInit+0x1bc>
    113e:	fe 01       	movw	r30, r28
    1140:	e1 58       	subi	r30, 0x81	; 129
    1142:	ff 4f       	sbci	r31, 0xFF	; 255
    1144:	91 83       	std	Z+1, r25	; 0x01
    1146:	80 83       	st	Z, r24
		{
			/* Step 1 */
			_delay_ms(30);
			/* Step 2 */
			u8CmdLoc = (0b00110000)  |
    1148:	fe 01       	movw	r30, r28
    114a:	e2 57       	subi	r30, 0x72	; 114
    114c:	ff 4f       	sbci	r31, 0xFF	; 255
    114e:	80 81       	ld	r24, Z
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	c9 01       	movw	r24, r18
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	82 0f       	add	r24, r18
    115c:	93 1f       	adc	r25, r19
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	fc 01       	movw	r30, r24
    1168:	e8 59       	subi	r30, 0x98	; 152
    116a:	ff 4f       	sbci	r31, 0xFF	; 255
    116c:	80 81       	ld	r24, Z
    116e:	86 95       	lsr	r24
    1170:	81 70       	andi	r24, 0x01	; 1
    1172:	88 2f       	mov	r24, r24
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	48 2f       	mov	r20, r24
    1184:	40 63       	ori	r20, 0x30	; 48
    1186:	fe 01       	movw	r30, r28
    1188:	e2 57       	subi	r30, 0x72	; 114
    118a:	ff 4f       	sbci	r31, 0xFF	; 255
    118c:	80 81       	ld	r24, Z
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	c9 01       	movw	r24, r18
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	82 0f       	add	r24, r18
    119a:	93 1f       	adc	r25, r19
    119c:	88 0f       	add	r24, r24
    119e:	99 1f       	adc	r25, r25
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	fc 01       	movw	r30, r24
    11a6:	e8 59       	subi	r30, 0x98	; 152
    11a8:	ff 4f       	sbci	r31, 0xFF	; 255
    11aa:	80 81       	ld	r24, Z
    11ac:	86 95       	lsr	r24
    11ae:	86 95       	lsr	r24
    11b0:	81 70       	andi	r24, 0x01	; 1
    11b2:	88 2f       	mov	r24, r24
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	84 2b       	or	r24, r20
    11c0:	fe 01       	movw	r30, r28
    11c2:	e3 57       	subi	r30, 0x73	; 115
    11c4:	ff 4f       	sbci	r31, 0xFF	; 255
    11c6:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8UsedLines  << 3 )|
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CharFont   << 2 );
			
			voidWriteCmd(u8CntrLoc , u8CmdLoc);
    11c8:	fe 01       	movw	r30, r28
    11ca:	e2 57       	subi	r30, 0x72	; 114
    11cc:	ff 4f       	sbci	r31, 0xFF	; 255
    11ce:	de 01       	movw	r26, r28
    11d0:	a3 57       	subi	r26, 0x73	; 115
    11d2:	bf 4f       	sbci	r27, 0xFF	; 255
    11d4:	80 81       	ld	r24, Z
    11d6:	6c 91       	ld	r22, X
    11d8:	0e 94 3f 13 	call	0x267e	; 0x267e <voidWriteCmd>
    11dc:	fe 01       	movw	r30, r28
    11de:	e5 58       	subi	r30, 0x85	; 133
    11e0:	ff 4f       	sbci	r31, 0xFF	; 255
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	a0 e8       	ldi	r26, 0x80	; 128
    11e8:	bf e3       	ldi	r27, 0x3F	; 63
    11ea:	80 83       	st	Z, r24
    11ec:	91 83       	std	Z+1, r25	; 0x01
    11ee:	a2 83       	std	Z+2, r26	; 0x02
    11f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f2:	8e 01       	movw	r16, r28
    11f4:	09 58       	subi	r16, 0x89	; 137
    11f6:	1f 4f       	sbci	r17, 0xFF	; 255
    11f8:	fe 01       	movw	r30, r28
    11fa:	e5 58       	subi	r30, 0x85	; 133
    11fc:	ff 4f       	sbci	r31, 0xFF	; 255
    11fe:	60 81       	ld	r22, Z
    1200:	71 81       	ldd	r23, Z+1	; 0x01
    1202:	82 81       	ldd	r24, Z+2	; 0x02
    1204:	93 81       	ldd	r25, Z+3	; 0x03
    1206:	20 e0       	ldi	r18, 0x00	; 0
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	4a ef       	ldi	r20, 0xFA	; 250
    120c:	54 e4       	ldi	r21, 0x44	; 68
    120e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1212:	dc 01       	movw	r26, r24
    1214:	cb 01       	movw	r24, r22
    1216:	f8 01       	movw	r30, r16
    1218:	80 83       	st	Z, r24
    121a:	91 83       	std	Z+1, r25	; 0x01
    121c:	a2 83       	std	Z+2, r26	; 0x02
    121e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1220:	fe 01       	movw	r30, r28
    1222:	e9 58       	subi	r30, 0x89	; 137
    1224:	ff 4f       	sbci	r31, 0xFF	; 255
    1226:	60 81       	ld	r22, Z
    1228:	71 81       	ldd	r23, Z+1	; 0x01
    122a:	82 81       	ldd	r24, Z+2	; 0x02
    122c:	93 81       	ldd	r25, Z+3	; 0x03
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	40 e8       	ldi	r20, 0x80	; 128
    1234:	5f e3       	ldi	r21, 0x3F	; 63
    1236:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    123a:	88 23       	and	r24, r24
    123c:	44 f4       	brge	.+16     	; 0x124e <LCD_voidInit+0x2d0>
		__ticks = 1;
    123e:	fe 01       	movw	r30, r28
    1240:	eb 58       	subi	r30, 0x8B	; 139
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	91 83       	std	Z+1, r25	; 0x01
    124a:	80 83       	st	Z, r24
    124c:	64 c0       	rjmp	.+200    	; 0x1316 <LCD_voidInit+0x398>
	else if (__tmp > 65535)
    124e:	fe 01       	movw	r30, r28
    1250:	e9 58       	subi	r30, 0x89	; 137
    1252:	ff 4f       	sbci	r31, 0xFF	; 255
    1254:	60 81       	ld	r22, Z
    1256:	71 81       	ldd	r23, Z+1	; 0x01
    1258:	82 81       	ldd	r24, Z+2	; 0x02
    125a:	93 81       	ldd	r25, Z+3	; 0x03
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	3f ef       	ldi	r19, 0xFF	; 255
    1260:	4f e7       	ldi	r20, 0x7F	; 127
    1262:	57 e4       	ldi	r21, 0x47	; 71
    1264:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1268:	18 16       	cp	r1, r24
    126a:	0c f0       	brlt	.+2      	; 0x126e <LCD_voidInit+0x2f0>
    126c:	43 c0       	rjmp	.+134    	; 0x12f4 <LCD_voidInit+0x376>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    126e:	fe 01       	movw	r30, r28
    1270:	e5 58       	subi	r30, 0x85	; 133
    1272:	ff 4f       	sbci	r31, 0xFF	; 255
    1274:	60 81       	ld	r22, Z
    1276:	71 81       	ldd	r23, Z+1	; 0x01
    1278:	82 81       	ldd	r24, Z+2	; 0x02
    127a:	93 81       	ldd	r25, Z+3	; 0x03
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	40 e2       	ldi	r20, 0x20	; 32
    1282:	51 e4       	ldi	r21, 0x41	; 65
    1284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	8e 01       	movw	r16, r28
    128e:	0b 58       	subi	r16, 0x8B	; 139
    1290:	1f 4f       	sbci	r17, 0xFF	; 255
    1292:	bc 01       	movw	r22, r24
    1294:	cd 01       	movw	r24, r26
    1296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	f8 01       	movw	r30, r16
    12a0:	91 83       	std	Z+1, r25	; 0x01
    12a2:	80 83       	st	Z, r24
    12a4:	1f c0       	rjmp	.+62     	; 0x12e4 <LCD_voidInit+0x366>
    12a6:	fe 01       	movw	r30, r28
    12a8:	ed 58       	subi	r30, 0x8D	; 141
    12aa:	ff 4f       	sbci	r31, 0xFF	; 255
    12ac:	88 ec       	ldi	r24, 0xC8	; 200
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	91 83       	std	Z+1, r25	; 0x01
    12b2:	80 83       	st	Z, r24
    12b4:	fe 01       	movw	r30, r28
    12b6:	ed 58       	subi	r30, 0x8D	; 141
    12b8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ba:	80 81       	ld	r24, Z
    12bc:	91 81       	ldd	r25, Z+1	; 0x01
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	f1 f7       	brne	.-4      	; 0x12be <LCD_voidInit+0x340>
    12c2:	fe 01       	movw	r30, r28
    12c4:	ed 58       	subi	r30, 0x8D	; 141
    12c6:	ff 4f       	sbci	r31, 0xFF	; 255
    12c8:	91 83       	std	Z+1, r25	; 0x01
    12ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12cc:	de 01       	movw	r26, r28
    12ce:	ab 58       	subi	r26, 0x8B	; 139
    12d0:	bf 4f       	sbci	r27, 0xFF	; 255
    12d2:	fe 01       	movw	r30, r28
    12d4:	eb 58       	subi	r30, 0x8B	; 139
    12d6:	ff 4f       	sbci	r31, 0xFF	; 255
    12d8:	80 81       	ld	r24, Z
    12da:	91 81       	ldd	r25, Z+1	; 0x01
    12dc:	01 97       	sbiw	r24, 0x01	; 1
    12de:	11 96       	adiw	r26, 0x01	; 1
    12e0:	9c 93       	st	X, r25
    12e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e4:	fe 01       	movw	r30, r28
    12e6:	eb 58       	subi	r30, 0x8B	; 139
    12e8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ea:	80 81       	ld	r24, Z
    12ec:	91 81       	ldd	r25, Z+1	; 0x01
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	d1 f6       	brne	.-76     	; 0x12a6 <LCD_voidInit+0x328>
    12f2:	27 c0       	rjmp	.+78     	; 0x1342 <LCD_voidInit+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f4:	8e 01       	movw	r16, r28
    12f6:	0b 58       	subi	r16, 0x8B	; 139
    12f8:	1f 4f       	sbci	r17, 0xFF	; 255
    12fa:	fe 01       	movw	r30, r28
    12fc:	e9 58       	subi	r30, 0x89	; 137
    12fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1300:	60 81       	ld	r22, Z
    1302:	71 81       	ldd	r23, Z+1	; 0x01
    1304:	82 81       	ldd	r24, Z+2	; 0x02
    1306:	93 81       	ldd	r25, Z+3	; 0x03
    1308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	f8 01       	movw	r30, r16
    1312:	91 83       	std	Z+1, r25	; 0x01
    1314:	80 83       	st	Z, r24
    1316:	de 01       	movw	r26, r28
    1318:	af 58       	subi	r26, 0x8F	; 143
    131a:	bf 4f       	sbci	r27, 0xFF	; 255
    131c:	fe 01       	movw	r30, r28
    131e:	eb 58       	subi	r30, 0x8B	; 139
    1320:	ff 4f       	sbci	r31, 0xFF	; 255
    1322:	80 81       	ld	r24, Z
    1324:	91 81       	ldd	r25, Z+1	; 0x01
    1326:	8d 93       	st	X+, r24
    1328:	9c 93       	st	X, r25
    132a:	fe 01       	movw	r30, r28
    132c:	ef 58       	subi	r30, 0x8F	; 143
    132e:	ff 4f       	sbci	r31, 0xFF	; 255
    1330:	80 81       	ld	r24, Z
    1332:	91 81       	ldd	r25, Z+1	; 0x01
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	f1 f7       	brne	.-4      	; 0x1334 <LCD_voidInit+0x3b6>
    1338:	fe 01       	movw	r30, r28
    133a:	ef 58       	subi	r30, 0x8F	; 143
    133c:	ff 4f       	sbci	r31, 0xFF	; 255
    133e:	91 83       	std	Z+1, r25	; 0x01
    1340:	80 83       	st	Z, r24
			/* Step 3 */
			_delay_ms(1);
			/* Step 4 */
			u8CmdLoc =   (0b00001000) |
    1342:	fe 01       	movw	r30, r28
    1344:	e2 57       	subi	r30, 0x72	; 114
    1346:	ff 4f       	sbci	r31, 0xFF	; 255
    1348:	80 81       	ld	r24, Z
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	c9 01       	movw	r24, r18
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	82 0f       	add	r24, r18
    1356:	93 1f       	adc	r25, r19
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	fc 01       	movw	r30, r24
    1362:	e8 59       	subi	r30, 0x98	; 152
    1364:	ff 4f       	sbci	r31, 0xFF	; 255
    1366:	80 81       	ld	r24, Z
    1368:	86 95       	lsr	r24
    136a:	86 95       	lsr	r24
    136c:	86 95       	lsr	r24
    136e:	81 70       	andi	r24, 0x01	; 1
    1370:	88 2f       	mov	r24, r24
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	48 2f       	mov	r20, r24
    137e:	48 60       	ori	r20, 0x08	; 8
    1380:	fe 01       	movw	r30, r28
    1382:	e2 57       	subi	r30, 0x72	; 114
    1384:	ff 4f       	sbci	r31, 0xFF	; 255
    1386:	80 81       	ld	r24, Z
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	c9 01       	movw	r24, r18
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	82 0f       	add	r24, r18
    1394:	93 1f       	adc	r25, r19
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	fc 01       	movw	r30, r24
    13a0:	e8 59       	subi	r30, 0x98	; 152
    13a2:	ff 4f       	sbci	r31, 0xFF	; 255
    13a4:	80 81       	ld	r24, Z
    13a6:	82 95       	swap	r24
    13a8:	8f 70       	andi	r24, 0x0F	; 15
    13aa:	81 70       	andi	r24, 0x01	; 1
    13ac:	88 2f       	mov	r24, r24
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	88 0f       	add	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	48 2b       	or	r20, r24
    13b6:	fe 01       	movw	r30, r28
    13b8:	e2 57       	subi	r30, 0x72	; 114
    13ba:	ff 4f       	sbci	r31, 0xFF	; 255
    13bc:	80 81       	ld	r24, Z
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	c9 01       	movw	r24, r18
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	82 0f       	add	r24, r18
    13ca:	93 1f       	adc	r25, r19
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	88 0f       	add	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	fc 01       	movw	r30, r24
    13d6:	e8 59       	subi	r30, 0x98	; 152
    13d8:	ff 4f       	sbci	r31, 0xFF	; 255
    13da:	80 81       	ld	r24, Z
    13dc:	82 95       	swap	r24
    13de:	86 95       	lsr	r24
    13e0:	87 70       	andi	r24, 0x07	; 7
    13e2:	81 70       	andi	r24, 0x01	; 1
    13e4:	84 2b       	or	r24, r20
    13e6:	fe 01       	movw	r30, r28
    13e8:	e3 57       	subi	r30, 0x73	; 115
    13ea:	ff 4f       	sbci	r31, 0xFF	; 255
    13ec:	80 83       	st	Z, r24
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8DisplayState     << 2 )|
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CursorState      << 1 )|
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CursorBlinkState << 0 );			
			voidWriteCmd(u8CntrLoc , u8CmdLoc);
    13ee:	fe 01       	movw	r30, r28
    13f0:	e2 57       	subi	r30, 0x72	; 114
    13f2:	ff 4f       	sbci	r31, 0xFF	; 255
    13f4:	de 01       	movw	r26, r28
    13f6:	a3 57       	subi	r26, 0x73	; 115
    13f8:	bf 4f       	sbci	r27, 0xFF	; 255
    13fa:	80 81       	ld	r24, Z
    13fc:	6c 91       	ld	r22, X
    13fe:	0e 94 3f 13 	call	0x267e	; 0x267e <voidWriteCmd>
    1402:	fe 01       	movw	r30, r28
    1404:	e3 59       	subi	r30, 0x93	; 147
    1406:	ff 4f       	sbci	r31, 0xFF	; 255
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	a0 e8       	ldi	r26, 0x80	; 128
    140e:	bf e3       	ldi	r27, 0x3F	; 63
    1410:	80 83       	st	Z, r24
    1412:	91 83       	std	Z+1, r25	; 0x01
    1414:	a2 83       	std	Z+2, r26	; 0x02
    1416:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1418:	8e 01       	movw	r16, r28
    141a:	07 59       	subi	r16, 0x97	; 151
    141c:	1f 4f       	sbci	r17, 0xFF	; 255
    141e:	fe 01       	movw	r30, r28
    1420:	e3 59       	subi	r30, 0x93	; 147
    1422:	ff 4f       	sbci	r31, 0xFF	; 255
    1424:	60 81       	ld	r22, Z
    1426:	71 81       	ldd	r23, Z+1	; 0x01
    1428:	82 81       	ldd	r24, Z+2	; 0x02
    142a:	93 81       	ldd	r25, Z+3	; 0x03
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	4a ef       	ldi	r20, 0xFA	; 250
    1432:	54 e4       	ldi	r21, 0x44	; 68
    1434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1438:	dc 01       	movw	r26, r24
    143a:	cb 01       	movw	r24, r22
    143c:	f8 01       	movw	r30, r16
    143e:	80 83       	st	Z, r24
    1440:	91 83       	std	Z+1, r25	; 0x01
    1442:	a2 83       	std	Z+2, r26	; 0x02
    1444:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1446:	fe 01       	movw	r30, r28
    1448:	e7 59       	subi	r30, 0x97	; 151
    144a:	ff 4f       	sbci	r31, 0xFF	; 255
    144c:	60 81       	ld	r22, Z
    144e:	71 81       	ldd	r23, Z+1	; 0x01
    1450:	82 81       	ldd	r24, Z+2	; 0x02
    1452:	93 81       	ldd	r25, Z+3	; 0x03
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	40 e8       	ldi	r20, 0x80	; 128
    145a:	5f e3       	ldi	r21, 0x3F	; 63
    145c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1460:	88 23       	and	r24, r24
    1462:	44 f4       	brge	.+16     	; 0x1474 <LCD_voidInit+0x4f6>
		__ticks = 1;
    1464:	fe 01       	movw	r30, r28
    1466:	e9 59       	subi	r30, 0x99	; 153
    1468:	ff 4f       	sbci	r31, 0xFF	; 255
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	91 83       	std	Z+1, r25	; 0x01
    1470:	80 83       	st	Z, r24
    1472:	64 c0       	rjmp	.+200    	; 0x153c <LCD_voidInit+0x5be>
	else if (__tmp > 65535)
    1474:	fe 01       	movw	r30, r28
    1476:	e7 59       	subi	r30, 0x97	; 151
    1478:	ff 4f       	sbci	r31, 0xFF	; 255
    147a:	60 81       	ld	r22, Z
    147c:	71 81       	ldd	r23, Z+1	; 0x01
    147e:	82 81       	ldd	r24, Z+2	; 0x02
    1480:	93 81       	ldd	r25, Z+3	; 0x03
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	3f ef       	ldi	r19, 0xFF	; 255
    1486:	4f e7       	ldi	r20, 0x7F	; 127
    1488:	57 e4       	ldi	r21, 0x47	; 71
    148a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    148e:	18 16       	cp	r1, r24
    1490:	0c f0       	brlt	.+2      	; 0x1494 <LCD_voidInit+0x516>
    1492:	43 c0       	rjmp	.+134    	; 0x151a <LCD_voidInit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1494:	fe 01       	movw	r30, r28
    1496:	e3 59       	subi	r30, 0x93	; 147
    1498:	ff 4f       	sbci	r31, 0xFF	; 255
    149a:	60 81       	ld	r22, Z
    149c:	71 81       	ldd	r23, Z+1	; 0x01
    149e:	82 81       	ldd	r24, Z+2	; 0x02
    14a0:	93 81       	ldd	r25, Z+3	; 0x03
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	40 e2       	ldi	r20, 0x20	; 32
    14a8:	51 e4       	ldi	r21, 0x41	; 65
    14aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	8e 01       	movw	r16, r28
    14b4:	09 59       	subi	r16, 0x99	; 153
    14b6:	1f 4f       	sbci	r17, 0xFF	; 255
    14b8:	bc 01       	movw	r22, r24
    14ba:	cd 01       	movw	r24, r26
    14bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	f8 01       	movw	r30, r16
    14c6:	91 83       	std	Z+1, r25	; 0x01
    14c8:	80 83       	st	Z, r24
    14ca:	1f c0       	rjmp	.+62     	; 0x150a <LCD_voidInit+0x58c>
    14cc:	fe 01       	movw	r30, r28
    14ce:	eb 59       	subi	r30, 0x9B	; 155
    14d0:	ff 4f       	sbci	r31, 0xFF	; 255
    14d2:	88 ec       	ldi	r24, 0xC8	; 200
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	91 83       	std	Z+1, r25	; 0x01
    14d8:	80 83       	st	Z, r24
    14da:	fe 01       	movw	r30, r28
    14dc:	eb 59       	subi	r30, 0x9B	; 155
    14de:	ff 4f       	sbci	r31, 0xFF	; 255
    14e0:	80 81       	ld	r24, Z
    14e2:	91 81       	ldd	r25, Z+1	; 0x01
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	f1 f7       	brne	.-4      	; 0x14e4 <LCD_voidInit+0x566>
    14e8:	fe 01       	movw	r30, r28
    14ea:	eb 59       	subi	r30, 0x9B	; 155
    14ec:	ff 4f       	sbci	r31, 0xFF	; 255
    14ee:	91 83       	std	Z+1, r25	; 0x01
    14f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f2:	de 01       	movw	r26, r28
    14f4:	a9 59       	subi	r26, 0x99	; 153
    14f6:	bf 4f       	sbci	r27, 0xFF	; 255
    14f8:	fe 01       	movw	r30, r28
    14fa:	e9 59       	subi	r30, 0x99	; 153
    14fc:	ff 4f       	sbci	r31, 0xFF	; 255
    14fe:	80 81       	ld	r24, Z
    1500:	91 81       	ldd	r25, Z+1	; 0x01
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	11 96       	adiw	r26, 0x01	; 1
    1506:	9c 93       	st	X, r25
    1508:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    150a:	fe 01       	movw	r30, r28
    150c:	e9 59       	subi	r30, 0x99	; 153
    150e:	ff 4f       	sbci	r31, 0xFF	; 255
    1510:	80 81       	ld	r24, Z
    1512:	91 81       	ldd	r25, Z+1	; 0x01
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	d1 f6       	brne	.-76     	; 0x14cc <LCD_voidInit+0x54e>
    1518:	27 c0       	rjmp	.+78     	; 0x1568 <LCD_voidInit+0x5ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151a:	8e 01       	movw	r16, r28
    151c:	09 59       	subi	r16, 0x99	; 153
    151e:	1f 4f       	sbci	r17, 0xFF	; 255
    1520:	fe 01       	movw	r30, r28
    1522:	e7 59       	subi	r30, 0x97	; 151
    1524:	ff 4f       	sbci	r31, 0xFF	; 255
    1526:	60 81       	ld	r22, Z
    1528:	71 81       	ldd	r23, Z+1	; 0x01
    152a:	82 81       	ldd	r24, Z+2	; 0x02
    152c:	93 81       	ldd	r25, Z+3	; 0x03
    152e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	f8 01       	movw	r30, r16
    1538:	91 83       	std	Z+1, r25	; 0x01
    153a:	80 83       	st	Z, r24
    153c:	de 01       	movw	r26, r28
    153e:	ad 59       	subi	r26, 0x9D	; 157
    1540:	bf 4f       	sbci	r27, 0xFF	; 255
    1542:	fe 01       	movw	r30, r28
    1544:	e9 59       	subi	r30, 0x99	; 153
    1546:	ff 4f       	sbci	r31, 0xFF	; 255
    1548:	80 81       	ld	r24, Z
    154a:	91 81       	ldd	r25, Z+1	; 0x01
    154c:	8d 93       	st	X+, r24
    154e:	9c 93       	st	X, r25
    1550:	fe 01       	movw	r30, r28
    1552:	ed 59       	subi	r30, 0x9D	; 157
    1554:	ff 4f       	sbci	r31, 0xFF	; 255
    1556:	80 81       	ld	r24, Z
    1558:	91 81       	ldd	r25, Z+1	; 0x01
    155a:	01 97       	sbiw	r24, 0x01	; 1
    155c:	f1 f7       	brne	.-4      	; 0x155a <LCD_voidInit+0x5dc>
    155e:	fe 01       	movw	r30, r28
    1560:	ed 59       	subi	r30, 0x9D	; 157
    1562:	ff 4f       	sbci	r31, 0xFF	; 255
    1564:	91 83       	std	Z+1, r25	; 0x01
    1566:	80 83       	st	Z, r24
			/* Step 5 */
			_delay_ms(1);
			/* Step 6 */
			voidWriteCmd(u8CntrLoc , 0x01);
    1568:	fe 01       	movw	r30, r28
    156a:	e2 57       	subi	r30, 0x72	; 114
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	80 81       	ld	r24, Z
    1570:	61 e0       	ldi	r22, 0x01	; 1
    1572:	0e 94 3f 13 	call	0x267e	; 0x267e <voidWriteCmd>
    1576:	fe 01       	movw	r30, r28
    1578:	e1 5a       	subi	r30, 0xA1	; 161
    157a:	ff 4f       	sbci	r31, 0xFF	; 255
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	a0 e4       	ldi	r26, 0x40	; 64
    1582:	b0 e4       	ldi	r27, 0x40	; 64
    1584:	80 83       	st	Z, r24
    1586:	91 83       	std	Z+1, r25	; 0x01
    1588:	a2 83       	std	Z+2, r26	; 0x02
    158a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158c:	8e 01       	movw	r16, r28
    158e:	05 5a       	subi	r16, 0xA5	; 165
    1590:	1f 4f       	sbci	r17, 0xFF	; 255
    1592:	fe 01       	movw	r30, r28
    1594:	e1 5a       	subi	r30, 0xA1	; 161
    1596:	ff 4f       	sbci	r31, 0xFF	; 255
    1598:	60 81       	ld	r22, Z
    159a:	71 81       	ldd	r23, Z+1	; 0x01
    159c:	82 81       	ldd	r24, Z+2	; 0x02
    159e:	93 81       	ldd	r25, Z+3	; 0x03
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	4a ef       	ldi	r20, 0xFA	; 250
    15a6:	54 e4       	ldi	r21, 0x44	; 68
    15a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	f8 01       	movw	r30, r16
    15b2:	80 83       	st	Z, r24
    15b4:	91 83       	std	Z+1, r25	; 0x01
    15b6:	a2 83       	std	Z+2, r26	; 0x02
    15b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15ba:	fe 01       	movw	r30, r28
    15bc:	e5 5a       	subi	r30, 0xA5	; 165
    15be:	ff 4f       	sbci	r31, 0xFF	; 255
    15c0:	60 81       	ld	r22, Z
    15c2:	71 81       	ldd	r23, Z+1	; 0x01
    15c4:	82 81       	ldd	r24, Z+2	; 0x02
    15c6:	93 81       	ldd	r25, Z+3	; 0x03
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	40 e8       	ldi	r20, 0x80	; 128
    15ce:	5f e3       	ldi	r21, 0x3F	; 63
    15d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15d4:	88 23       	and	r24, r24
    15d6:	44 f4       	brge	.+16     	; 0x15e8 <LCD_voidInit+0x66a>
		__ticks = 1;
    15d8:	fe 01       	movw	r30, r28
    15da:	e7 5a       	subi	r30, 0xA7	; 167
    15dc:	ff 4f       	sbci	r31, 0xFF	; 255
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	91 83       	std	Z+1, r25	; 0x01
    15e4:	80 83       	st	Z, r24
    15e6:	64 c0       	rjmp	.+200    	; 0x16b0 <LCD_voidInit+0x732>
	else if (__tmp > 65535)
    15e8:	fe 01       	movw	r30, r28
    15ea:	e5 5a       	subi	r30, 0xA5	; 165
    15ec:	ff 4f       	sbci	r31, 0xFF	; 255
    15ee:	60 81       	ld	r22, Z
    15f0:	71 81       	ldd	r23, Z+1	; 0x01
    15f2:	82 81       	ldd	r24, Z+2	; 0x02
    15f4:	93 81       	ldd	r25, Z+3	; 0x03
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	3f ef       	ldi	r19, 0xFF	; 255
    15fa:	4f e7       	ldi	r20, 0x7F	; 127
    15fc:	57 e4       	ldi	r21, 0x47	; 71
    15fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1602:	18 16       	cp	r1, r24
    1604:	0c f0       	brlt	.+2      	; 0x1608 <LCD_voidInit+0x68a>
    1606:	43 c0       	rjmp	.+134    	; 0x168e <LCD_voidInit+0x710>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1608:	fe 01       	movw	r30, r28
    160a:	e1 5a       	subi	r30, 0xA1	; 161
    160c:	ff 4f       	sbci	r31, 0xFF	; 255
    160e:	60 81       	ld	r22, Z
    1610:	71 81       	ldd	r23, Z+1	; 0x01
    1612:	82 81       	ldd	r24, Z+2	; 0x02
    1614:	93 81       	ldd	r25, Z+3	; 0x03
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	40 e2       	ldi	r20, 0x20	; 32
    161c:	51 e4       	ldi	r21, 0x41	; 65
    161e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	8e 01       	movw	r16, r28
    1628:	07 5a       	subi	r16, 0xA7	; 167
    162a:	1f 4f       	sbci	r17, 0xFF	; 255
    162c:	bc 01       	movw	r22, r24
    162e:	cd 01       	movw	r24, r26
    1630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	f8 01       	movw	r30, r16
    163a:	91 83       	std	Z+1, r25	; 0x01
    163c:	80 83       	st	Z, r24
    163e:	1f c0       	rjmp	.+62     	; 0x167e <LCD_voidInit+0x700>
    1640:	fe 01       	movw	r30, r28
    1642:	e9 5a       	subi	r30, 0xA9	; 169
    1644:	ff 4f       	sbci	r31, 0xFF	; 255
    1646:	88 ec       	ldi	r24, 0xC8	; 200
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	91 83       	std	Z+1, r25	; 0x01
    164c:	80 83       	st	Z, r24
    164e:	fe 01       	movw	r30, r28
    1650:	e9 5a       	subi	r30, 0xA9	; 169
    1652:	ff 4f       	sbci	r31, 0xFF	; 255
    1654:	80 81       	ld	r24, Z
    1656:	91 81       	ldd	r25, Z+1	; 0x01
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	f1 f7       	brne	.-4      	; 0x1658 <LCD_voidInit+0x6da>
    165c:	fe 01       	movw	r30, r28
    165e:	e9 5a       	subi	r30, 0xA9	; 169
    1660:	ff 4f       	sbci	r31, 0xFF	; 255
    1662:	91 83       	std	Z+1, r25	; 0x01
    1664:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1666:	de 01       	movw	r26, r28
    1668:	a7 5a       	subi	r26, 0xA7	; 167
    166a:	bf 4f       	sbci	r27, 0xFF	; 255
    166c:	fe 01       	movw	r30, r28
    166e:	e7 5a       	subi	r30, 0xA7	; 167
    1670:	ff 4f       	sbci	r31, 0xFF	; 255
    1672:	80 81       	ld	r24, Z
    1674:	91 81       	ldd	r25, Z+1	; 0x01
    1676:	01 97       	sbiw	r24, 0x01	; 1
    1678:	11 96       	adiw	r26, 0x01	; 1
    167a:	9c 93       	st	X, r25
    167c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    167e:	fe 01       	movw	r30, r28
    1680:	e7 5a       	subi	r30, 0xA7	; 167
    1682:	ff 4f       	sbci	r31, 0xFF	; 255
    1684:	80 81       	ld	r24, Z
    1686:	91 81       	ldd	r25, Z+1	; 0x01
    1688:	00 97       	sbiw	r24, 0x00	; 0
    168a:	d1 f6       	brne	.-76     	; 0x1640 <LCD_voidInit+0x6c2>
    168c:	27 c0       	rjmp	.+78     	; 0x16dc <LCD_voidInit+0x75e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    168e:	8e 01       	movw	r16, r28
    1690:	07 5a       	subi	r16, 0xA7	; 167
    1692:	1f 4f       	sbci	r17, 0xFF	; 255
    1694:	fe 01       	movw	r30, r28
    1696:	e5 5a       	subi	r30, 0xA5	; 165
    1698:	ff 4f       	sbci	r31, 0xFF	; 255
    169a:	60 81       	ld	r22, Z
    169c:	71 81       	ldd	r23, Z+1	; 0x01
    169e:	82 81       	ldd	r24, Z+2	; 0x02
    16a0:	93 81       	ldd	r25, Z+3	; 0x03
    16a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	f8 01       	movw	r30, r16
    16ac:	91 83       	std	Z+1, r25	; 0x01
    16ae:	80 83       	st	Z, r24
    16b0:	de 01       	movw	r26, r28
    16b2:	ab 5a       	subi	r26, 0xAB	; 171
    16b4:	bf 4f       	sbci	r27, 0xFF	; 255
    16b6:	fe 01       	movw	r30, r28
    16b8:	e7 5a       	subi	r30, 0xA7	; 167
    16ba:	ff 4f       	sbci	r31, 0xFF	; 255
    16bc:	80 81       	ld	r24, Z
    16be:	91 81       	ldd	r25, Z+1	; 0x01
    16c0:	8d 93       	st	X+, r24
    16c2:	9c 93       	st	X, r25
    16c4:	fe 01       	movw	r30, r28
    16c6:	eb 5a       	subi	r30, 0xAB	; 171
    16c8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ca:	80 81       	ld	r24, Z
    16cc:	91 81       	ldd	r25, Z+1	; 0x01
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	f1 f7       	brne	.-4      	; 0x16ce <LCD_voidInit+0x750>
    16d2:	fe 01       	movw	r30, r28
    16d4:	eb 5a       	subi	r30, 0xAB	; 171
    16d6:	ff 4f       	sbci	r31, 0xFF	; 255
    16d8:	91 83       	std	Z+1, r25	; 0x01
    16da:	80 83       	st	Z, r24
			/* Step 7 */
			_delay_ms(3);
			/* Step 8 */
			u8CmdLoc =   (0b00000100) |
    16dc:	fe 01       	movw	r30, r28
    16de:	e2 57       	subi	r30, 0x72	; 114
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	80 81       	ld	r24, Z
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	c9 01       	movw	r24, r18
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	82 0f       	add	r24, r18
    16f0:	93 1f       	adc	r25, r19
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	fc 01       	movw	r30, r24
    16fc:	e8 59       	subi	r30, 0x98	; 152
    16fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1700:	80 81       	ld	r24, Z
    1702:	82 95       	swap	r24
    1704:	86 95       	lsr	r24
    1706:	86 95       	lsr	r24
    1708:	83 70       	andi	r24, 0x03	; 3
    170a:	81 70       	andi	r24, 0x01	; 1
    170c:	88 2f       	mov	r24, r24
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	88 0f       	add	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	48 2f       	mov	r20, r24
    1716:	44 60       	ori	r20, 0x04	; 4
    1718:	fe 01       	movw	r30, r28
    171a:	e2 57       	subi	r30, 0x72	; 114
    171c:	ff 4f       	sbci	r31, 0xFF	; 255
    171e:	80 81       	ld	r24, Z
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	c9 01       	movw	r24, r18
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	82 0f       	add	r24, r18
    172c:	93 1f       	adc	r25, r19
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	fc 01       	movw	r30, r24
    1738:	e8 59       	subi	r30, 0x98	; 152
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	80 81       	ld	r24, Z
    173e:	88 1f       	adc	r24, r24
    1740:	88 27       	eor	r24, r24
    1742:	88 1f       	adc	r24, r24
    1744:	84 2b       	or	r24, r20
    1746:	fe 01       	movw	r30, r28
    1748:	e3 57       	subi	r30, 0x73	; 115
    174a:	ff 4f       	sbci	r31, 0xFF	; 255
    174c:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8IncrementMode  << 1 )|
            (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8ShiftMode      << 0 );
                        
			voidWriteCmd(u8CntrLoc , u8CmdLoc);
    174e:	fe 01       	movw	r30, r28
    1750:	e2 57       	subi	r30, 0x72	; 114
    1752:	ff 4f       	sbci	r31, 0xFF	; 255
    1754:	de 01       	movw	r26, r28
    1756:	a3 57       	subi	r26, 0x73	; 115
    1758:	bf 4f       	sbci	r27, 0xFF	; 255
    175a:	80 81       	ld	r24, Z
    175c:	6c 91       	ld	r22, X
    175e:	0e 94 3f 13 	call	0x267e	; 0x267e <voidWriteCmd>
    1762:	fe 01       	movw	r30, r28
    1764:	ef 5a       	subi	r30, 0xAF	; 175
    1766:	ff 4f       	sbci	r31, 0xFF	; 255
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	a0 e4       	ldi	r26, 0x40	; 64
    176e:	b0 e4       	ldi	r27, 0x40	; 64
    1770:	80 83       	st	Z, r24
    1772:	91 83       	std	Z+1, r25	; 0x01
    1774:	a2 83       	std	Z+2, r26	; 0x02
    1776:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1778:	8e 01       	movw	r16, r28
    177a:	03 5b       	subi	r16, 0xB3	; 179
    177c:	1f 4f       	sbci	r17, 0xFF	; 255
    177e:	fe 01       	movw	r30, r28
    1780:	ef 5a       	subi	r30, 0xAF	; 175
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	60 81       	ld	r22, Z
    1786:	71 81       	ldd	r23, Z+1	; 0x01
    1788:	82 81       	ldd	r24, Z+2	; 0x02
    178a:	93 81       	ldd	r25, Z+3	; 0x03
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	4a ef       	ldi	r20, 0xFA	; 250
    1792:	54 e4       	ldi	r21, 0x44	; 68
    1794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	f8 01       	movw	r30, r16
    179e:	80 83       	st	Z, r24
    17a0:	91 83       	std	Z+1, r25	; 0x01
    17a2:	a2 83       	std	Z+2, r26	; 0x02
    17a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17a6:	fe 01       	movw	r30, r28
    17a8:	e3 5b       	subi	r30, 0xB3	; 179
    17aa:	ff 4f       	sbci	r31, 0xFF	; 255
    17ac:	60 81       	ld	r22, Z
    17ae:	71 81       	ldd	r23, Z+1	; 0x01
    17b0:	82 81       	ldd	r24, Z+2	; 0x02
    17b2:	93 81       	ldd	r25, Z+3	; 0x03
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	40 e8       	ldi	r20, 0x80	; 128
    17ba:	5f e3       	ldi	r21, 0x3F	; 63
    17bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17c0:	88 23       	and	r24, r24
    17c2:	44 f4       	brge	.+16     	; 0x17d4 <LCD_voidInit+0x856>
		__ticks = 1;
    17c4:	fe 01       	movw	r30, r28
    17c6:	e5 5b       	subi	r30, 0xB5	; 181
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	91 83       	std	Z+1, r25	; 0x01
    17d0:	80 83       	st	Z, r24
    17d2:	64 c0       	rjmp	.+200    	; 0x189c <LCD_voidInit+0x91e>
	else if (__tmp > 65535)
    17d4:	fe 01       	movw	r30, r28
    17d6:	e3 5b       	subi	r30, 0xB3	; 179
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
    17da:	60 81       	ld	r22, Z
    17dc:	71 81       	ldd	r23, Z+1	; 0x01
    17de:	82 81       	ldd	r24, Z+2	; 0x02
    17e0:	93 81       	ldd	r25, Z+3	; 0x03
    17e2:	20 e0       	ldi	r18, 0x00	; 0
    17e4:	3f ef       	ldi	r19, 0xFF	; 255
    17e6:	4f e7       	ldi	r20, 0x7F	; 127
    17e8:	57 e4       	ldi	r21, 0x47	; 71
    17ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ee:	18 16       	cp	r1, r24
    17f0:	0c f0       	brlt	.+2      	; 0x17f4 <LCD_voidInit+0x876>
    17f2:	43 c0       	rjmp	.+134    	; 0x187a <LCD_voidInit+0x8fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f4:	fe 01       	movw	r30, r28
    17f6:	ef 5a       	subi	r30, 0xAF	; 175
    17f8:	ff 4f       	sbci	r31, 0xFF	; 255
    17fa:	60 81       	ld	r22, Z
    17fc:	71 81       	ldd	r23, Z+1	; 0x01
    17fe:	82 81       	ldd	r24, Z+2	; 0x02
    1800:	93 81       	ldd	r25, Z+3	; 0x03
    1802:	20 e0       	ldi	r18, 0x00	; 0
    1804:	30 e0       	ldi	r19, 0x00	; 0
    1806:	40 e2       	ldi	r20, 0x20	; 32
    1808:	51 e4       	ldi	r21, 0x41	; 65
    180a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	8e 01       	movw	r16, r28
    1814:	05 5b       	subi	r16, 0xB5	; 181
    1816:	1f 4f       	sbci	r17, 0xFF	; 255
    1818:	bc 01       	movw	r22, r24
    181a:	cd 01       	movw	r24, r26
    181c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	f8 01       	movw	r30, r16
    1826:	91 83       	std	Z+1, r25	; 0x01
    1828:	80 83       	st	Z, r24
    182a:	1f c0       	rjmp	.+62     	; 0x186a <LCD_voidInit+0x8ec>
    182c:	fe 01       	movw	r30, r28
    182e:	e7 5b       	subi	r30, 0xB7	; 183
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	88 ec       	ldi	r24, 0xC8	; 200
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	91 83       	std	Z+1, r25	; 0x01
    1838:	80 83       	st	Z, r24
    183a:	fe 01       	movw	r30, r28
    183c:	e7 5b       	subi	r30, 0xB7	; 183
    183e:	ff 4f       	sbci	r31, 0xFF	; 255
    1840:	80 81       	ld	r24, Z
    1842:	91 81       	ldd	r25, Z+1	; 0x01
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	f1 f7       	brne	.-4      	; 0x1844 <LCD_voidInit+0x8c6>
    1848:	fe 01       	movw	r30, r28
    184a:	e7 5b       	subi	r30, 0xB7	; 183
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	91 83       	std	Z+1, r25	; 0x01
    1850:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1852:	de 01       	movw	r26, r28
    1854:	a5 5b       	subi	r26, 0xB5	; 181
    1856:	bf 4f       	sbci	r27, 0xFF	; 255
    1858:	fe 01       	movw	r30, r28
    185a:	e5 5b       	subi	r30, 0xB5	; 181
    185c:	ff 4f       	sbci	r31, 0xFF	; 255
    185e:	80 81       	ld	r24, Z
    1860:	91 81       	ldd	r25, Z+1	; 0x01
    1862:	01 97       	sbiw	r24, 0x01	; 1
    1864:	11 96       	adiw	r26, 0x01	; 1
    1866:	9c 93       	st	X, r25
    1868:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    186a:	fe 01       	movw	r30, r28
    186c:	e5 5b       	subi	r30, 0xB5	; 181
    186e:	ff 4f       	sbci	r31, 0xFF	; 255
    1870:	80 81       	ld	r24, Z
    1872:	91 81       	ldd	r25, Z+1	; 0x01
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	d1 f6       	brne	.-76     	; 0x182c <LCD_voidInit+0x8ae>
    1878:	b2 c3       	rjmp	.+1892   	; 0x1fde <LCD_voidInit+0x1060>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    187a:	8e 01       	movw	r16, r28
    187c:	05 5b       	subi	r16, 0xB5	; 181
    187e:	1f 4f       	sbci	r17, 0xFF	; 255
    1880:	fe 01       	movw	r30, r28
    1882:	e3 5b       	subi	r30, 0xB3	; 179
    1884:	ff 4f       	sbci	r31, 0xFF	; 255
    1886:	60 81       	ld	r22, Z
    1888:	71 81       	ldd	r23, Z+1	; 0x01
    188a:	82 81       	ldd	r24, Z+2	; 0x02
    188c:	93 81       	ldd	r25, Z+3	; 0x03
    188e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1892:	dc 01       	movw	r26, r24
    1894:	cb 01       	movw	r24, r22
    1896:	f8 01       	movw	r30, r16
    1898:	91 83       	std	Z+1, r25	; 0x01
    189a:	80 83       	st	Z, r24
    189c:	de 01       	movw	r26, r28
    189e:	a9 5b       	subi	r26, 0xB9	; 185
    18a0:	bf 4f       	sbci	r27, 0xFF	; 255
    18a2:	fe 01       	movw	r30, r28
    18a4:	e5 5b       	subi	r30, 0xB5	; 181
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	80 81       	ld	r24, Z
    18aa:	91 81       	ldd	r25, Z+1	; 0x01
    18ac:	11 96       	adiw	r26, 0x01	; 1
    18ae:	9c 93       	st	X, r25
    18b0:	8e 93       	st	-X, r24
    18b2:	fe 01       	movw	r30, r28
    18b4:	e9 5b       	subi	r30, 0xB9	; 185
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	80 81       	ld	r24, Z
    18ba:	91 81       	ldd	r25, Z+1	; 0x01
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	f1 f7       	brne	.-4      	; 0x18bc <LCD_voidInit+0x93e>
    18c0:	fe 01       	movw	r30, r28
    18c2:	e9 5b       	subi	r30, 0xB9	; 185
    18c4:	ff 4f       	sbci	r31, 0xFF	; 255
    18c6:	91 83       	std	Z+1, r25	; 0x01
    18c8:	80 83       	st	Z, r24
    18ca:	89 c3       	rjmp	.+1810   	; 0x1fde <LCD_voidInit+0x1060>
    18cc:	fe 01       	movw	r30, r28
    18ce:	ed 5b       	subi	r30, 0xBD	; 189
    18d0:	ff 4f       	sbci	r31, 0xFF	; 255
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	a0 ef       	ldi	r26, 0xF0	; 240
    18d8:	b1 e4       	ldi	r27, 0x41	; 65
    18da:	80 83       	st	Z, r24
    18dc:	91 83       	std	Z+1, r25	; 0x01
    18de:	a2 83       	std	Z+2, r26	; 0x02
    18e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e2:	8e 01       	movw	r16, r28
    18e4:	01 5c       	subi	r16, 0xC1	; 193
    18e6:	1f 4f       	sbci	r17, 0xFF	; 255
    18e8:	fe 01       	movw	r30, r28
    18ea:	ed 5b       	subi	r30, 0xBD	; 189
    18ec:	ff 4f       	sbci	r31, 0xFF	; 255
    18ee:	60 81       	ld	r22, Z
    18f0:	71 81       	ldd	r23, Z+1	; 0x01
    18f2:	82 81       	ldd	r24, Z+2	; 0x02
    18f4:	93 81       	ldd	r25, Z+3	; 0x03
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	4a ef       	ldi	r20, 0xFA	; 250
    18fc:	54 e4       	ldi	r21, 0x44	; 68
    18fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	f8 01       	movw	r30, r16
    1908:	80 83       	st	Z, r24
    190a:	91 83       	std	Z+1, r25	; 0x01
    190c:	a2 83       	std	Z+2, r26	; 0x02
    190e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1910:	fe 01       	movw	r30, r28
    1912:	ff 96       	adiw	r30, 0x3f	; 63
    1914:	60 81       	ld	r22, Z
    1916:	71 81       	ldd	r23, Z+1	; 0x01
    1918:	82 81       	ldd	r24, Z+2	; 0x02
    191a:	93 81       	ldd	r25, Z+3	; 0x03
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	40 e8       	ldi	r20, 0x80	; 128
    1922:	5f e3       	ldi	r21, 0x3F	; 63
    1924:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1928:	88 23       	and	r24, r24
    192a:	2c f4       	brge	.+10     	; 0x1936 <LCD_voidInit+0x9b8>
		__ticks = 1;
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	9e af       	std	Y+62, r25	; 0x3e
    1932:	8d af       	std	Y+61, r24	; 0x3d
    1934:	46 c0       	rjmp	.+140    	; 0x19c2 <LCD_voidInit+0xa44>
	else if (__tmp > 65535)
    1936:	fe 01       	movw	r30, r28
    1938:	ff 96       	adiw	r30, 0x3f	; 63
    193a:	60 81       	ld	r22, Z
    193c:	71 81       	ldd	r23, Z+1	; 0x01
    193e:	82 81       	ldd	r24, Z+2	; 0x02
    1940:	93 81       	ldd	r25, Z+3	; 0x03
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	3f ef       	ldi	r19, 0xFF	; 255
    1946:	4f e7       	ldi	r20, 0x7F	; 127
    1948:	57 e4       	ldi	r21, 0x47	; 71
    194a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    194e:	18 16       	cp	r1, r24
    1950:	64 f5       	brge	.+88     	; 0x19aa <LCD_voidInit+0xa2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1952:	fe 01       	movw	r30, r28
    1954:	ed 5b       	subi	r30, 0xBD	; 189
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	60 81       	ld	r22, Z
    195a:	71 81       	ldd	r23, Z+1	; 0x01
    195c:	82 81       	ldd	r24, Z+2	; 0x02
    195e:	93 81       	ldd	r25, Z+3	; 0x03
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	40 e2       	ldi	r20, 0x20	; 32
    1966:	51 e4       	ldi	r21, 0x41	; 65
    1968:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	bc 01       	movw	r22, r24
    1972:	cd 01       	movw	r24, r26
    1974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	9e af       	std	Y+62, r25	; 0x3e
    197e:	8d af       	std	Y+61, r24	; 0x3d
    1980:	0f c0       	rjmp	.+30     	; 0x19a0 <LCD_voidInit+0xa22>
    1982:	88 ec       	ldi	r24, 0xC8	; 200
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	9c af       	std	Y+60, r25	; 0x3c
    1988:	8b af       	std	Y+59, r24	; 0x3b
    198a:	8b ad       	ldd	r24, Y+59	; 0x3b
    198c:	9c ad       	ldd	r25, Y+60	; 0x3c
    198e:	01 97       	sbiw	r24, 0x01	; 1
    1990:	f1 f7       	brne	.-4      	; 0x198e <LCD_voidInit+0xa10>
    1992:	9c af       	std	Y+60, r25	; 0x3c
    1994:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1996:	8d ad       	ldd	r24, Y+61	; 0x3d
    1998:	9e ad       	ldd	r25, Y+62	; 0x3e
    199a:	01 97       	sbiw	r24, 0x01	; 1
    199c:	9e af       	std	Y+62, r25	; 0x3e
    199e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    19a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    19a4:	00 97       	sbiw	r24, 0x00	; 0
    19a6:	69 f7       	brne	.-38     	; 0x1982 <LCD_voidInit+0xa04>
    19a8:	16 c0       	rjmp	.+44     	; 0x19d6 <LCD_voidInit+0xa58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19aa:	fe 01       	movw	r30, r28
    19ac:	ff 96       	adiw	r30, 0x3f	; 63
    19ae:	60 81       	ld	r22, Z
    19b0:	71 81       	ldd	r23, Z+1	; 0x01
    19b2:	82 81       	ldd	r24, Z+2	; 0x02
    19b4:	93 81       	ldd	r25, Z+3	; 0x03
    19b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	9e af       	std	Y+62, r25	; 0x3e
    19c0:	8d af       	std	Y+61, r24	; 0x3d
    19c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    19c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    19c6:	9a af       	std	Y+58, r25	; 0x3a
    19c8:	89 af       	std	Y+57, r24	; 0x39
    19ca:	89 ad       	ldd	r24, Y+57	; 0x39
    19cc:	9a ad       	ldd	r25, Y+58	; 0x3a
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	f1 f7       	brne	.-4      	; 0x19ce <LCD_voidInit+0xa50>
    19d2:	9a af       	std	Y+58, r25	; 0x3a
    19d4:	89 af       	std	Y+57, r24	; 0x39
		else 
		{
			/* Step 1 */
			_delay_ms(30);
			/* Step 2 */
			voidWriteCmd(u8CntrLoc , 0b00100000);
    19d6:	fe 01       	movw	r30, r28
    19d8:	e2 57       	subi	r30, 0x72	; 114
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	80 81       	ld	r24, Z
    19de:	60 e2       	ldi	r22, 0x20	; 32
    19e0:	0e 94 3f 13 	call	0x267e	; 0x267e <voidWriteCmd>
			voidWriteCmd(u8CntrLoc , 0b00100000);
    19e4:	fe 01       	movw	r30, r28
    19e6:	e2 57       	subi	r30, 0x72	; 114
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	80 81       	ld	r24, Z
    19ec:	60 e2       	ldi	r22, 0x20	; 32
    19ee:	0e 94 3f 13 	call	0x267e	; 0x267e <voidWriteCmd>
			u8CmdLoc = (0b00100000)  |
    19f2:	fe 01       	movw	r30, r28
    19f4:	e2 57       	subi	r30, 0x72	; 114
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	80 81       	ld	r24, Z
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	c9 01       	movw	r24, r18
    1a00:	88 0f       	add	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	82 0f       	add	r24, r18
    1a06:	93 1f       	adc	r25, r19
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	88 0f       	add	r24, r24
    1a0e:	99 1f       	adc	r25, r25
    1a10:	fc 01       	movw	r30, r24
    1a12:	e8 59       	subi	r30, 0x98	; 152
    1a14:	ff 4f       	sbci	r31, 0xFF	; 255
    1a16:	80 81       	ld	r24, Z
    1a18:	86 95       	lsr	r24
    1a1a:	81 70       	andi	r24, 0x01	; 1
    1a1c:	88 2f       	mov	r24, r24
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	96 95       	lsr	r25
    1a22:	98 2f       	mov	r25, r24
    1a24:	88 27       	eor	r24, r24
    1a26:	97 95       	ror	r25
    1a28:	87 95       	ror	r24
    1a2a:	48 2f       	mov	r20, r24
    1a2c:	40 62       	ori	r20, 0x20	; 32
    1a2e:	fe 01       	movw	r30, r28
    1a30:	e2 57       	subi	r30, 0x72	; 114
    1a32:	ff 4f       	sbci	r31, 0xFF	; 255
    1a34:	80 81       	ld	r24, Z
    1a36:	28 2f       	mov	r18, r24
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	c9 01       	movw	r24, r18
    1a3c:	88 0f       	add	r24, r24
    1a3e:	99 1f       	adc	r25, r25
    1a40:	82 0f       	add	r24, r18
    1a42:	93 1f       	adc	r25, r19
    1a44:	88 0f       	add	r24, r24
    1a46:	99 1f       	adc	r25, r25
    1a48:	88 0f       	add	r24, r24
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	e8 59       	subi	r30, 0x98	; 152
    1a50:	ff 4f       	sbci	r31, 0xFF	; 255
    1a52:	80 81       	ld	r24, Z
    1a54:	86 95       	lsr	r24
    1a56:	86 95       	lsr	r24
    1a58:	81 70       	andi	r24, 0x01	; 1
    1a5a:	88 2f       	mov	r24, r24
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	00 24       	eor	r0, r0
    1a60:	96 95       	lsr	r25
    1a62:	87 95       	ror	r24
    1a64:	07 94       	ror	r0
    1a66:	96 95       	lsr	r25
    1a68:	87 95       	ror	r24
    1a6a:	07 94       	ror	r0
    1a6c:	98 2f       	mov	r25, r24
    1a6e:	80 2d       	mov	r24, r0
    1a70:	84 2b       	or	r24, r20
    1a72:	fe 01       	movw	r30, r28
    1a74:	e3 57       	subi	r30, 0x73	; 115
    1a76:	ff 4f       	sbci	r31, 0xFF	; 255
    1a78:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8UsedLines  << 7 )|
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CharFont   << 6 );
			
		    voidWriteCmd(u8CntrLoc , u8CmdLoc);
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	e2 57       	subi	r30, 0x72	; 114
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	de 01       	movw	r26, r28
    1a82:	a3 57       	subi	r26, 0x73	; 115
    1a84:	bf 4f       	sbci	r27, 0xFF	; 255
    1a86:	80 81       	ld	r24, Z
    1a88:	6c 91       	ld	r22, X
    1a8a:	0e 94 3f 13 	call	0x267e	; 0x267e <voidWriteCmd>
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	a0 e8       	ldi	r26, 0x80	; 128
    1a94:	bf e3       	ldi	r27, 0x3F	; 63
    1a96:	8d ab       	std	Y+53, r24	; 0x35
    1a98:	9e ab       	std	Y+54, r25	; 0x36
    1a9a:	af ab       	std	Y+55, r26	; 0x37
    1a9c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9e:	6d a9       	ldd	r22, Y+53	; 0x35
    1aa0:	7e a9       	ldd	r23, Y+54	; 0x36
    1aa2:	8f a9       	ldd	r24, Y+55	; 0x37
    1aa4:	98 ad       	ldd	r25, Y+56	; 0x38
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	4a ef       	ldi	r20, 0xFA	; 250
    1aac:	54 e4       	ldi	r21, 0x44	; 68
    1aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	89 ab       	std	Y+49, r24	; 0x31
    1ab8:	9a ab       	std	Y+50, r25	; 0x32
    1aba:	ab ab       	std	Y+51, r26	; 0x33
    1abc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1abe:	69 a9       	ldd	r22, Y+49	; 0x31
    1ac0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ac2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ac4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	40 e8       	ldi	r20, 0x80	; 128
    1acc:	5f e3       	ldi	r21, 0x3F	; 63
    1ace:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ad2:	88 23       	and	r24, r24
    1ad4:	2c f4       	brge	.+10     	; 0x1ae0 <LCD_voidInit+0xb62>
		__ticks = 1;
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	98 ab       	std	Y+48, r25	; 0x30
    1adc:	8f a7       	std	Y+47, r24	; 0x2f
    1ade:	3f c0       	rjmp	.+126    	; 0x1b5e <LCD_voidInit+0xbe0>
	else if (__tmp > 65535)
    1ae0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ae2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ae4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ae6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	3f ef       	ldi	r19, 0xFF	; 255
    1aec:	4f e7       	ldi	r20, 0x7F	; 127
    1aee:	57 e4       	ldi	r21, 0x47	; 71
    1af0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1af4:	18 16       	cp	r1, r24
    1af6:	4c f5       	brge	.+82     	; 0x1b4a <LCD_voidInit+0xbcc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af8:	6d a9       	ldd	r22, Y+53	; 0x35
    1afa:	7e a9       	ldd	r23, Y+54	; 0x36
    1afc:	8f a9       	ldd	r24, Y+55	; 0x37
    1afe:	98 ad       	ldd	r25, Y+56	; 0x38
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e2       	ldi	r20, 0x20	; 32
    1b06:	51 e4       	ldi	r21, 0x41	; 65
    1b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	bc 01       	movw	r22, r24
    1b12:	cd 01       	movw	r24, r26
    1b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	98 ab       	std	Y+48, r25	; 0x30
    1b1e:	8f a7       	std	Y+47, r24	; 0x2f
    1b20:	0f c0       	rjmp	.+30     	; 0x1b40 <LCD_voidInit+0xbc2>
    1b22:	88 ec       	ldi	r24, 0xC8	; 200
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	9e a7       	std	Y+46, r25	; 0x2e
    1b28:	8d a7       	std	Y+45, r24	; 0x2d
    1b2a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b2c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	f1 f7       	brne	.-4      	; 0x1b2e <LCD_voidInit+0xbb0>
    1b32:	9e a7       	std	Y+46, r25	; 0x2e
    1b34:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b36:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b38:	98 a9       	ldd	r25, Y+48	; 0x30
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	98 ab       	std	Y+48, r25	; 0x30
    1b3e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b42:	98 a9       	ldd	r25, Y+48	; 0x30
    1b44:	00 97       	sbiw	r24, 0x00	; 0
    1b46:	69 f7       	brne	.-38     	; 0x1b22 <LCD_voidInit+0xba4>
    1b48:	14 c0       	rjmp	.+40     	; 0x1b72 <LCD_voidInit+0xbf4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b4a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b4c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b4e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b50:	9c a9       	ldd	r25, Y+52	; 0x34
    1b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	98 ab       	std	Y+48, r25	; 0x30
    1b5c:	8f a7       	std	Y+47, r24	; 0x2f
    1b5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b60:	98 a9       	ldd	r25, Y+48	; 0x30
    1b62:	9c a7       	std	Y+44, r25	; 0x2c
    1b64:	8b a7       	std	Y+43, r24	; 0x2b
    1b66:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b68:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <LCD_voidInit+0xbec>
    1b6e:	9c a7       	std	Y+44, r25	; 0x2c
    1b70:	8b a7       	std	Y+43, r24	; 0x2b
			/* Step 3 */
			_delay_ms(1);
			/* Step 4 */
			voidWriteCmd(u8CntrLoc , 0b00000000);
    1b72:	fe 01       	movw	r30, r28
    1b74:	e2 57       	subi	r30, 0x72	; 114
    1b76:	ff 4f       	sbci	r31, 0xFF	; 255
    1b78:	80 81       	ld	r24, Z
    1b7a:	60 e0       	ldi	r22, 0x00	; 0
    1b7c:	0e 94 3f 13 	call	0x267e	; 0x267e <voidWriteCmd>
			
			u8CmdLoc =   (0b10000000) |
    1b80:	fe 01       	movw	r30, r28
    1b82:	e2 57       	subi	r30, 0x72	; 114
    1b84:	ff 4f       	sbci	r31, 0xFF	; 255
    1b86:	80 81       	ld	r24, Z
    1b88:	28 2f       	mov	r18, r24
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	c9 01       	movw	r24, r18
    1b8e:	88 0f       	add	r24, r24
    1b90:	99 1f       	adc	r25, r25
    1b92:	82 0f       	add	r24, r18
    1b94:	93 1f       	adc	r25, r19
    1b96:	88 0f       	add	r24, r24
    1b98:	99 1f       	adc	r25, r25
    1b9a:	88 0f       	add	r24, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	e8 59       	subi	r30, 0x98	; 152
    1ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba4:	80 81       	ld	r24, Z
    1ba6:	86 95       	lsr	r24
    1ba8:	86 95       	lsr	r24
    1baa:	86 95       	lsr	r24
    1bac:	81 70       	andi	r24, 0x01	; 1
    1bae:	88 2f       	mov	r24, r24
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	00 24       	eor	r0, r0
    1bb4:	96 95       	lsr	r25
    1bb6:	87 95       	ror	r24
    1bb8:	07 94       	ror	r0
    1bba:	96 95       	lsr	r25
    1bbc:	87 95       	ror	r24
    1bbe:	07 94       	ror	r0
    1bc0:	98 2f       	mov	r25, r24
    1bc2:	80 2d       	mov	r24, r0
    1bc4:	48 2f       	mov	r20, r24
    1bc6:	40 68       	ori	r20, 0x80	; 128
    1bc8:	fe 01       	movw	r30, r28
    1bca:	e2 57       	subi	r30, 0x72	; 114
    1bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bce:	80 81       	ld	r24, Z
    1bd0:	28 2f       	mov	r18, r24
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	c9 01       	movw	r24, r18
    1bd6:	88 0f       	add	r24, r24
    1bd8:	99 1f       	adc	r25, r25
    1bda:	82 0f       	add	r24, r18
    1bdc:	93 1f       	adc	r25, r19
    1bde:	88 0f       	add	r24, r24
    1be0:	99 1f       	adc	r25, r25
    1be2:	88 0f       	add	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	fc 01       	movw	r30, r24
    1be8:	e8 59       	subi	r30, 0x98	; 152
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	80 81       	ld	r24, Z
    1bee:	82 95       	swap	r24
    1bf0:	8f 70       	andi	r24, 0x0F	; 15
    1bf2:	81 70       	andi	r24, 0x01	; 1
    1bf4:	88 2f       	mov	r24, r24
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	88 0f       	add	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	82 95       	swap	r24
    1bfe:	92 95       	swap	r25
    1c00:	90 7f       	andi	r25, 0xF0	; 240
    1c02:	98 27       	eor	r25, r24
    1c04:	80 7f       	andi	r24, 0xF0	; 240
    1c06:	98 27       	eor	r25, r24
    1c08:	48 2b       	or	r20, r24
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	e2 57       	subi	r30, 0x72	; 114
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	80 81       	ld	r24, Z
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	c9 01       	movw	r24, r18
    1c18:	88 0f       	add	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	82 0f       	add	r24, r18
    1c1e:	93 1f       	adc	r25, r19
    1c20:	88 0f       	add	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	88 0f       	add	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	fc 01       	movw	r30, r24
    1c2a:	e8 59       	subi	r30, 0x98	; 152
    1c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2e:	80 81       	ld	r24, Z
    1c30:	82 95       	swap	r24
    1c32:	86 95       	lsr	r24
    1c34:	87 70       	andi	r24, 0x07	; 7
    1c36:	81 70       	andi	r24, 0x01	; 1
    1c38:	88 2f       	mov	r24, r24
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	82 95       	swap	r24
    1c3e:	92 95       	swap	r25
    1c40:	90 7f       	andi	r25, 0xF0	; 240
    1c42:	98 27       	eor	r25, r24
    1c44:	80 7f       	andi	r24, 0xF0	; 240
    1c46:	98 27       	eor	r25, r24
    1c48:	84 2b       	or	r24, r20
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	e3 57       	subi	r30, 0x73	; 115
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	80 83       	st	Z, r24
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8DisplayState     << 6 )|
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CursorState      << 5 )|
                         (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8CursorBlinkState << 4 );			
			voidWriteCmd(u8CntrLoc , u8CmdLoc);
    1c52:	fe 01       	movw	r30, r28
    1c54:	e2 57       	subi	r30, 0x72	; 114
    1c56:	ff 4f       	sbci	r31, 0xFF	; 255
    1c58:	de 01       	movw	r26, r28
    1c5a:	a3 57       	subi	r26, 0x73	; 115
    1c5c:	bf 4f       	sbci	r27, 0xFF	; 255
    1c5e:	80 81       	ld	r24, Z
    1c60:	6c 91       	ld	r22, X
    1c62:	0e 94 3f 13 	call	0x267e	; 0x267e <voidWriteCmd>
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	a0 e8       	ldi	r26, 0x80	; 128
    1c6c:	bf e3       	ldi	r27, 0x3F	; 63
    1c6e:	8f a3       	std	Y+39, r24	; 0x27
    1c70:	98 a7       	std	Y+40, r25	; 0x28
    1c72:	a9 a7       	std	Y+41, r26	; 0x29
    1c74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c76:	6f a1       	ldd	r22, Y+39	; 0x27
    1c78:	78 a5       	ldd	r23, Y+40	; 0x28
    1c7a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	4a ef       	ldi	r20, 0xFA	; 250
    1c84:	54 e4       	ldi	r21, 0x44	; 68
    1c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	8b a3       	std	Y+35, r24	; 0x23
    1c90:	9c a3       	std	Y+36, r25	; 0x24
    1c92:	ad a3       	std	Y+37, r26	; 0x25
    1c94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c96:	6b a1       	ldd	r22, Y+35	; 0x23
    1c98:	7c a1       	ldd	r23, Y+36	; 0x24
    1c9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 e8       	ldi	r20, 0x80	; 128
    1ca4:	5f e3       	ldi	r21, 0x3F	; 63
    1ca6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1caa:	88 23       	and	r24, r24
    1cac:	2c f4       	brge	.+10     	; 0x1cb8 <LCD_voidInit+0xd3a>
		__ticks = 1;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	9a a3       	std	Y+34, r25	; 0x22
    1cb4:	89 a3       	std	Y+33, r24	; 0x21
    1cb6:	3f c0       	rjmp	.+126    	; 0x1d36 <LCD_voidInit+0xdb8>
	else if (__tmp > 65535)
    1cb8:	6b a1       	ldd	r22, Y+35	; 0x23
    1cba:	7c a1       	ldd	r23, Y+36	; 0x24
    1cbc:	8d a1       	ldd	r24, Y+37	; 0x25
    1cbe:	9e a1       	ldd	r25, Y+38	; 0x26
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	3f ef       	ldi	r19, 0xFF	; 255
    1cc4:	4f e7       	ldi	r20, 0x7F	; 127
    1cc6:	57 e4       	ldi	r21, 0x47	; 71
    1cc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ccc:	18 16       	cp	r1, r24
    1cce:	4c f5       	brge	.+82     	; 0x1d22 <LCD_voidInit+0xda4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd0:	6f a1       	ldd	r22, Y+39	; 0x27
    1cd2:	78 a5       	ldd	r23, Y+40	; 0x28
    1cd4:	89 a5       	ldd	r24, Y+41	; 0x29
    1cd6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e2       	ldi	r20, 0x20	; 32
    1cde:	51 e4       	ldi	r21, 0x41	; 65
    1ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	bc 01       	movw	r22, r24
    1cea:	cd 01       	movw	r24, r26
    1cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	9a a3       	std	Y+34, r25	; 0x22
    1cf6:	89 a3       	std	Y+33, r24	; 0x21
    1cf8:	0f c0       	rjmp	.+30     	; 0x1d18 <LCD_voidInit+0xd9a>
    1cfa:	88 ec       	ldi	r24, 0xC8	; 200
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	98 a3       	std	Y+32, r25	; 0x20
    1d00:	8f 8f       	std	Y+31, r24	; 0x1f
    1d02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d04:	98 a1       	ldd	r25, Y+32	; 0x20
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <LCD_voidInit+0xd88>
    1d0a:	98 a3       	std	Y+32, r25	; 0x20
    1d0c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d10:	9a a1       	ldd	r25, Y+34	; 0x22
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	9a a3       	std	Y+34, r25	; 0x22
    1d16:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d18:	89 a1       	ldd	r24, Y+33	; 0x21
    1d1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d1c:	00 97       	sbiw	r24, 0x00	; 0
    1d1e:	69 f7       	brne	.-38     	; 0x1cfa <LCD_voidInit+0xd7c>
    1d20:	14 c0       	rjmp	.+40     	; 0x1d4a <LCD_voidInit+0xdcc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d22:	6b a1       	ldd	r22, Y+35	; 0x23
    1d24:	7c a1       	ldd	r23, Y+36	; 0x24
    1d26:	8d a1       	ldd	r24, Y+37	; 0x25
    1d28:	9e a1       	ldd	r25, Y+38	; 0x26
    1d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	9a a3       	std	Y+34, r25	; 0x22
    1d34:	89 a3       	std	Y+33, r24	; 0x21
    1d36:	89 a1       	ldd	r24, Y+33	; 0x21
    1d38:	9a a1       	ldd	r25, Y+34	; 0x22
    1d3a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d3c:	8d 8f       	std	Y+29, r24	; 0x1d
    1d3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <LCD_voidInit+0xdc4>
    1d46:	9e 8f       	std	Y+30, r25	; 0x1e
    1d48:	8d 8f       	std	Y+29, r24	; 0x1d
			/* Step 5 */
			_delay_ms(1);
			/* Step 6 */
			voidWriteCmd(u8CntrLoc , 0b00000000);
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	e2 57       	subi	r30, 0x72	; 114
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	80 81       	ld	r24, Z
    1d52:	60 e0       	ldi	r22, 0x00	; 0
    1d54:	0e 94 3f 13 	call	0x267e	; 0x267e <voidWriteCmd>
			voidWriteCmd(u8CntrLoc , 0b00010000);
    1d58:	fe 01       	movw	r30, r28
    1d5a:	e2 57       	subi	r30, 0x72	; 114
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	80 81       	ld	r24, Z
    1d60:	60 e1       	ldi	r22, 0x10	; 16
    1d62:	0e 94 3f 13 	call	0x267e	; 0x267e <voidWriteCmd>
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	a0 e4       	ldi	r26, 0x40	; 64
    1d6c:	b0 e4       	ldi	r27, 0x40	; 64
    1d6e:	89 8f       	std	Y+25, r24	; 0x19
    1d70:	9a 8f       	std	Y+26, r25	; 0x1a
    1d72:	ab 8f       	std	Y+27, r26	; 0x1b
    1d74:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d76:	69 8d       	ldd	r22, Y+25	; 0x19
    1d78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	4a ef       	ldi	r20, 0xFA	; 250
    1d84:	54 e4       	ldi	r21, 0x44	; 68
    1d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	8d 8b       	std	Y+21, r24	; 0x15
    1d90:	9e 8b       	std	Y+22, r25	; 0x16
    1d92:	af 8b       	std	Y+23, r26	; 0x17
    1d94:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d96:	6d 89       	ldd	r22, Y+21	; 0x15
    1d98:	7e 89       	ldd	r23, Y+22	; 0x16
    1d9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	40 e8       	ldi	r20, 0x80	; 128
    1da4:	5f e3       	ldi	r21, 0x3F	; 63
    1da6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1daa:	88 23       	and	r24, r24
    1dac:	2c f4       	brge	.+10     	; 0x1db8 <LCD_voidInit+0xe3a>
		__ticks = 1;
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	9c 8b       	std	Y+20, r25	; 0x14
    1db4:	8b 8b       	std	Y+19, r24	; 0x13
    1db6:	3f c0       	rjmp	.+126    	; 0x1e36 <LCD_voidInit+0xeb8>
	else if (__tmp > 65535)
    1db8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dba:	7e 89       	ldd	r23, Y+22	; 0x16
    1dbc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dbe:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	3f ef       	ldi	r19, 0xFF	; 255
    1dc4:	4f e7       	ldi	r20, 0x7F	; 127
    1dc6:	57 e4       	ldi	r21, 0x47	; 71
    1dc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dcc:	18 16       	cp	r1, r24
    1dce:	4c f5       	brge	.+82     	; 0x1e22 <LCD_voidInit+0xea4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd0:	69 8d       	ldd	r22, Y+25	; 0x19
    1dd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dd8:	20 e0       	ldi	r18, 0x00	; 0
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	40 e2       	ldi	r20, 0x20	; 32
    1dde:	51 e4       	ldi	r21, 0x41	; 65
    1de0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	bc 01       	movw	r22, r24
    1dea:	cd 01       	movw	r24, r26
    1dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	9c 8b       	std	Y+20, r25	; 0x14
    1df6:	8b 8b       	std	Y+19, r24	; 0x13
    1df8:	0f c0       	rjmp	.+30     	; 0x1e18 <LCD_voidInit+0xe9a>
    1dfa:	88 ec       	ldi	r24, 0xC8	; 200
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	9a 8b       	std	Y+18, r25	; 0x12
    1e00:	89 8b       	std	Y+17, r24	; 0x11
    1e02:	89 89       	ldd	r24, Y+17	; 0x11
    1e04:	9a 89       	ldd	r25, Y+18	; 0x12
    1e06:	01 97       	sbiw	r24, 0x01	; 1
    1e08:	f1 f7       	brne	.-4      	; 0x1e06 <LCD_voidInit+0xe88>
    1e0a:	9a 8b       	std	Y+18, r25	; 0x12
    1e0c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e10:	9c 89       	ldd	r25, Y+20	; 0x14
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	9c 8b       	std	Y+20, r25	; 0x14
    1e16:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e18:	8b 89       	ldd	r24, Y+19	; 0x13
    1e1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e1c:	00 97       	sbiw	r24, 0x00	; 0
    1e1e:	69 f7       	brne	.-38     	; 0x1dfa <LCD_voidInit+0xe7c>
    1e20:	14 c0       	rjmp	.+40     	; 0x1e4a <LCD_voidInit+0xecc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e22:	6d 89       	ldd	r22, Y+21	; 0x15
    1e24:	7e 89       	ldd	r23, Y+22	; 0x16
    1e26:	8f 89       	ldd	r24, Y+23	; 0x17
    1e28:	98 8d       	ldd	r25, Y+24	; 0x18
    1e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	9c 8b       	std	Y+20, r25	; 0x14
    1e34:	8b 8b       	std	Y+19, r24	; 0x13
    1e36:	8b 89       	ldd	r24, Y+19	; 0x13
    1e38:	9c 89       	ldd	r25, Y+20	; 0x14
    1e3a:	98 8b       	std	Y+16, r25	; 0x10
    1e3c:	8f 87       	std	Y+15, r24	; 0x0f
    1e3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e40:	98 89       	ldd	r25, Y+16	; 0x10
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	f1 f7       	brne	.-4      	; 0x1e42 <LCD_voidInit+0xec4>
    1e46:	98 8b       	std	Y+16, r25	; 0x10
    1e48:	8f 87       	std	Y+15, r24	; 0x0f
			/* Step 7 */
			_delay_ms(3);
			/* Step 8 */
			voidWriteCmd(u8CntrLoc , 0b00000000);
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	e2 57       	subi	r30, 0x72	; 114
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	80 81       	ld	r24, Z
    1e52:	60 e0       	ldi	r22, 0x00	; 0
    1e54:	0e 94 3f 13 	call	0x267e	; 0x267e <voidWriteCmd>
			u8CmdLoc =   (0b01000000) |
    1e58:	fe 01       	movw	r30, r28
    1e5a:	e2 57       	subi	r30, 0x72	; 114
    1e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5e:	80 81       	ld	r24, Z
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	c9 01       	movw	r24, r18
    1e66:	88 0f       	add	r24, r24
    1e68:	99 1f       	adc	r25, r25
    1e6a:	82 0f       	add	r24, r18
    1e6c:	93 1f       	adc	r25, r19
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	fc 01       	movw	r30, r24
    1e78:	e8 59       	subi	r30, 0x98	; 152
    1e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7c:	80 81       	ld	r24, Z
    1e7e:	82 95       	swap	r24
    1e80:	86 95       	lsr	r24
    1e82:	86 95       	lsr	r24
    1e84:	83 70       	andi	r24, 0x03	; 3
    1e86:	81 70       	andi	r24, 0x01	; 1
    1e88:	88 2f       	mov	r24, r24
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	88 0f       	add	r24, r24
    1e8e:	99 1f       	adc	r25, r25
    1e90:	82 95       	swap	r24
    1e92:	92 95       	swap	r25
    1e94:	90 7f       	andi	r25, 0xF0	; 240
    1e96:	98 27       	eor	r25, r24
    1e98:	80 7f       	andi	r24, 0xF0	; 240
    1e9a:	98 27       	eor	r25, r24
    1e9c:	48 2f       	mov	r20, r24
    1e9e:	40 64       	ori	r20, 0x40	; 64
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	e2 57       	subi	r30, 0x72	; 114
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	80 81       	ld	r24, Z
    1ea8:	28 2f       	mov	r18, r24
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	c9 01       	movw	r24, r18
    1eae:	88 0f       	add	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	82 0f       	add	r24, r18
    1eb4:	93 1f       	adc	r25, r19
    1eb6:	88 0f       	add	r24, r24
    1eb8:	99 1f       	adc	r25, r25
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	fc 01       	movw	r30, r24
    1ec0:	e8 59       	subi	r30, 0x98	; 152
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	80 81       	ld	r24, Z
    1ec6:	88 1f       	adc	r24, r24
    1ec8:	88 27       	eor	r24, r24
    1eca:	88 1f       	adc	r24, r24
    1ecc:	88 2f       	mov	r24, r24
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	82 95       	swap	r24
    1ed2:	92 95       	swap	r25
    1ed4:	90 7f       	andi	r25, 0xF0	; 240
    1ed6:	98 27       	eor	r25, r24
    1ed8:	80 7f       	andi	r24, 0xF0	; 240
    1eda:	98 27       	eor	r25, r24
    1edc:	84 2b       	or	r24, r20
    1ede:	fe 01       	movw	r30, r28
    1ee0:	e3 57       	subi	r30, 0x73	; 115
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	80 83       	st	Z, r24
			(LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8IncrementMode  << 5 )|
            (LCD_astrConfigSet[u8CntrLoc].strLcdHwCfg.u8ShiftMode      << 4 );
                        
			voidWriteCmd(u8CntrLoc , u8CmdLoc);
    1ee6:	fe 01       	movw	r30, r28
    1ee8:	e2 57       	subi	r30, 0x72	; 114
    1eea:	ff 4f       	sbci	r31, 0xFF	; 255
    1eec:	de 01       	movw	r26, r28
    1eee:	a3 57       	subi	r26, 0x73	; 115
    1ef0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ef2:	80 81       	ld	r24, Z
    1ef4:	6c 91       	ld	r22, X
    1ef6:	0e 94 3f 13 	call	0x267e	; 0x267e <voidWriteCmd>
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	a0 e4       	ldi	r26, 0x40	; 64
    1f00:	b0 e4       	ldi	r27, 0x40	; 64
    1f02:	8b 87       	std	Y+11, r24	; 0x0b
    1f04:	9c 87       	std	Y+12, r25	; 0x0c
    1f06:	ad 87       	std	Y+13, r26	; 0x0d
    1f08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	4a ef       	ldi	r20, 0xFA	; 250
    1f18:	54 e4       	ldi	r21, 0x44	; 68
    1f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	8f 83       	std	Y+7, r24	; 0x07
    1f24:	98 87       	std	Y+8, r25	; 0x08
    1f26:	a9 87       	std	Y+9, r26	; 0x09
    1f28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f2c:	78 85       	ldd	r23, Y+8	; 0x08
    1f2e:	89 85       	ldd	r24, Y+9	; 0x09
    1f30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	40 e8       	ldi	r20, 0x80	; 128
    1f38:	5f e3       	ldi	r21, 0x3F	; 63
    1f3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f3e:	88 23       	and	r24, r24
    1f40:	2c f4       	brge	.+10     	; 0x1f4c <LCD_voidInit+0xfce>
		__ticks = 1;
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	9e 83       	std	Y+6, r25	; 0x06
    1f48:	8d 83       	std	Y+5, r24	; 0x05
    1f4a:	3f c0       	rjmp	.+126    	; 0x1fca <LCD_voidInit+0x104c>
	else if (__tmp > 65535)
    1f4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4e:	78 85       	ldd	r23, Y+8	; 0x08
    1f50:	89 85       	ldd	r24, Y+9	; 0x09
    1f52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	3f ef       	ldi	r19, 0xFF	; 255
    1f58:	4f e7       	ldi	r20, 0x7F	; 127
    1f5a:	57 e4       	ldi	r21, 0x47	; 71
    1f5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f60:	18 16       	cp	r1, r24
    1f62:	4c f5       	brge	.+82     	; 0x1fb6 <LCD_voidInit+0x1038>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f64:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f66:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	40 e2       	ldi	r20, 0x20	; 32
    1f72:	51 e4       	ldi	r21, 0x41	; 65
    1f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	bc 01       	movw	r22, r24
    1f7e:	cd 01       	movw	r24, r26
    1f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	9e 83       	std	Y+6, r25	; 0x06
    1f8a:	8d 83       	std	Y+5, r24	; 0x05
    1f8c:	0f c0       	rjmp	.+30     	; 0x1fac <LCD_voidInit+0x102e>
    1f8e:	88 ec       	ldi	r24, 0xC8	; 200
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	9c 83       	std	Y+4, r25	; 0x04
    1f94:	8b 83       	std	Y+3, r24	; 0x03
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	f1 f7       	brne	.-4      	; 0x1f9a <LCD_voidInit+0x101c>
    1f9e:	9c 83       	std	Y+4, r25	; 0x04
    1fa0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa6:	01 97       	sbiw	r24, 0x01	; 1
    1fa8:	9e 83       	std	Y+6, r25	; 0x06
    1faa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fac:	8d 81       	ldd	r24, Y+5	; 0x05
    1fae:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb0:	00 97       	sbiw	r24, 0x00	; 0
    1fb2:	69 f7       	brne	.-38     	; 0x1f8e <LCD_voidInit+0x1010>
    1fb4:	14 c0       	rjmp	.+40     	; 0x1fde <LCD_voidInit+0x1060>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb8:	78 85       	ldd	r23, Y+8	; 0x08
    1fba:	89 85       	ldd	r24, Y+9	; 0x09
    1fbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	9e 83       	std	Y+6, r25	; 0x06
    1fc8:	8d 83       	std	Y+5, r24	; 0x05
    1fca:	8d 81       	ldd	r24, Y+5	; 0x05
    1fcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fce:	9a 83       	std	Y+2, r25	; 0x02
    1fd0:	89 83       	std	Y+1, r24	; 0x01
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01
    1fd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd6:	01 97       	sbiw	r24, 0x01	; 1
    1fd8:	f1 f7       	brne	.-4      	; 0x1fd6 <LCD_voidInit+0x1058>
    1fda:	9a 83       	std	Y+2, r25	; 0x02
    1fdc:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidInit(void)
{
	uint8 u8CntrLoc = 0 ;
	uint8 u8CmdLoc  = 0 ;
	for ( u8CntrLoc = 0 ; u8CntrLoc < LCD_MAX_NUM ; u8CntrLoc ++)
    1fde:	de 01       	movw	r26, r28
    1fe0:	a2 57       	subi	r26, 0x72	; 114
    1fe2:	bf 4f       	sbci	r27, 0xFF	; 255
    1fe4:	fe 01       	movw	r30, r28
    1fe6:	e2 57       	subi	r30, 0x72	; 114
    1fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fea:	80 81       	ld	r24, Z
    1fec:	8f 5f       	subi	r24, 0xFF	; 255
    1fee:	8c 93       	st	X, r24
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	e2 57       	subi	r30, 0x72	; 114
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	80 81       	ld	r24, Z
    1ff8:	88 23       	and	r24, r24
    1ffa:	11 f4       	brne	.+4      	; 0x2000 <LCD_voidInit+0x1082>
    1ffc:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <LCD_voidInit+0x36>
			_delay_ms(3);
		}
	}
	
	
}
    2000:	c2 57       	subi	r28, 0x72	; 114
    2002:	df 4f       	sbci	r29, 0xFF	; 255
    2004:	0f b6       	in	r0, 0x3f	; 63
    2006:	f8 94       	cli
    2008:	de bf       	out	0x3e, r29	; 62
    200a:	0f be       	out	0x3f, r0	; 63
    200c:	cd bf       	out	0x3d, r28	; 61
    200e:	cf 91       	pop	r28
    2010:	df 91       	pop	r29
    2012:	1f 91       	pop	r17
    2014:	0f 91       	pop	r16
    2016:	08 95       	ret

00002018 <LCD_voidWriteCmd>:

void LCD_voidWriteCmd(uint8 u8LcdIndxCpy , uint8 u8CmdCpy)
{
    2018:	df 93       	push	r29
    201a:	cf 93       	push	r28
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	ac 97       	sbiw	r28, 0x2c	; 44
    2022:	0f b6       	in	r0, 0x3f	; 63
    2024:	f8 94       	cli
    2026:	de bf       	out	0x3e, r29	; 62
    2028:	0f be       	out	0x3f, r0	; 63
    202a:	cd bf       	out	0x3d, r28	; 61
    202c:	8b a7       	std	Y+43, r24	; 0x2b
    202e:	6c a7       	std	Y+44, r22	; 0x2c
	if (LCD_astrConfigSet[u8LcdIndxCpy].strLcdHwCfg.u8Mode  == LCD_8BIT_MODE )
    2030:	8b a5       	ldd	r24, Y+43	; 0x2b
    2032:	28 2f       	mov	r18, r24
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	c9 01       	movw	r24, r18
    2038:	88 0f       	add	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	82 0f       	add	r24, r18
    203e:	93 1f       	adc	r25, r19
    2040:	88 0f       	add	r24, r24
    2042:	99 1f       	adc	r25, r25
    2044:	88 0f       	add	r24, r24
    2046:	99 1f       	adc	r25, r25
    2048:	fc 01       	movw	r30, r24
    204a:	e8 59       	subi	r30, 0x98	; 152
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	80 81       	ld	r24, Z
    2050:	81 70       	andi	r24, 0x01	; 1
    2052:	81 30       	cpi	r24, 0x01	; 1
    2054:	09 f0       	breq	.+2      	; 0x2058 <LCD_voidWriteCmd+0x40>
    2056:	77 c0       	rjmp	.+238    	; 0x2146 <LCD_voidWriteCmd+0x12e>
	{
		voidWriteCmd(u8LcdIndxCpy ,u8CmdCpy );
    2058:	8b a5       	ldd	r24, Y+43	; 0x2b
    205a:	6c a5       	ldd	r22, Y+44	; 0x2c
    205c:	0e 94 3f 13 	call	0x267e	; 0x267e <voidWriteCmd>
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	a0 e8       	ldi	r26, 0x80	; 128
    2066:	bf e3       	ldi	r27, 0x3F	; 63
    2068:	8f a3       	std	Y+39, r24	; 0x27
    206a:	98 a7       	std	Y+40, r25	; 0x28
    206c:	a9 a7       	std	Y+41, r26	; 0x29
    206e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2070:	6f a1       	ldd	r22, Y+39	; 0x27
    2072:	78 a5       	ldd	r23, Y+40	; 0x28
    2074:	89 a5       	ldd	r24, Y+41	; 0x29
    2076:	9a a5       	ldd	r25, Y+42	; 0x2a
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	4a ef       	ldi	r20, 0xFA	; 250
    207e:	54 e4       	ldi	r21, 0x44	; 68
    2080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	8b a3       	std	Y+35, r24	; 0x23
    208a:	9c a3       	std	Y+36, r25	; 0x24
    208c:	ad a3       	std	Y+37, r26	; 0x25
    208e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2090:	6b a1       	ldd	r22, Y+35	; 0x23
    2092:	7c a1       	ldd	r23, Y+36	; 0x24
    2094:	8d a1       	ldd	r24, Y+37	; 0x25
    2096:	9e a1       	ldd	r25, Y+38	; 0x26
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	40 e8       	ldi	r20, 0x80	; 128
    209e:	5f e3       	ldi	r21, 0x3F	; 63
    20a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20a4:	88 23       	and	r24, r24
    20a6:	2c f4       	brge	.+10     	; 0x20b2 <LCD_voidWriteCmd+0x9a>
		__ticks = 1;
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	9a a3       	std	Y+34, r25	; 0x22
    20ae:	89 a3       	std	Y+33, r24	; 0x21
    20b0:	3f c0       	rjmp	.+126    	; 0x2130 <LCD_voidWriteCmd+0x118>
	else if (__tmp > 65535)
    20b2:	6b a1       	ldd	r22, Y+35	; 0x23
    20b4:	7c a1       	ldd	r23, Y+36	; 0x24
    20b6:	8d a1       	ldd	r24, Y+37	; 0x25
    20b8:	9e a1       	ldd	r25, Y+38	; 0x26
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	3f ef       	ldi	r19, 0xFF	; 255
    20be:	4f e7       	ldi	r20, 0x7F	; 127
    20c0:	57 e4       	ldi	r21, 0x47	; 71
    20c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20c6:	18 16       	cp	r1, r24
    20c8:	4c f5       	brge	.+82     	; 0x211c <LCD_voidWriteCmd+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ca:	6f a1       	ldd	r22, Y+39	; 0x27
    20cc:	78 a5       	ldd	r23, Y+40	; 0x28
    20ce:	89 a5       	ldd	r24, Y+41	; 0x29
    20d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	40 e2       	ldi	r20, 0x20	; 32
    20d8:	51 e4       	ldi	r21, 0x41	; 65
    20da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	bc 01       	movw	r22, r24
    20e4:	cd 01       	movw	r24, r26
    20e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	9a a3       	std	Y+34, r25	; 0x22
    20f0:	89 a3       	std	Y+33, r24	; 0x21
    20f2:	0f c0       	rjmp	.+30     	; 0x2112 <LCD_voidWriteCmd+0xfa>
    20f4:	88 ec       	ldi	r24, 0xC8	; 200
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	98 a3       	std	Y+32, r25	; 0x20
    20fa:	8f 8f       	std	Y+31, r24	; 0x1f
    20fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20fe:	98 a1       	ldd	r25, Y+32	; 0x20
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	f1 f7       	brne	.-4      	; 0x2100 <LCD_voidWriteCmd+0xe8>
    2104:	98 a3       	std	Y+32, r25	; 0x20
    2106:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2108:	89 a1       	ldd	r24, Y+33	; 0x21
    210a:	9a a1       	ldd	r25, Y+34	; 0x22
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	9a a3       	std	Y+34, r25	; 0x22
    2110:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2112:	89 a1       	ldd	r24, Y+33	; 0x21
    2114:	9a a1       	ldd	r25, Y+34	; 0x22
    2116:	00 97       	sbiw	r24, 0x00	; 0
    2118:	69 f7       	brne	.-38     	; 0x20f4 <LCD_voidWriteCmd+0xdc>
    211a:	05 c1       	rjmp	.+522    	; 0x2326 <LCD_voidWriteCmd+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    211c:	6b a1       	ldd	r22, Y+35	; 0x23
    211e:	7c a1       	ldd	r23, Y+36	; 0x24
    2120:	8d a1       	ldd	r24, Y+37	; 0x25
    2122:	9e a1       	ldd	r25, Y+38	; 0x26
    2124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	9a a3       	std	Y+34, r25	; 0x22
    212e:	89 a3       	std	Y+33, r24	; 0x21
    2130:	89 a1       	ldd	r24, Y+33	; 0x21
    2132:	9a a1       	ldd	r25, Y+34	; 0x22
    2134:	9e 8f       	std	Y+30, r25	; 0x1e
    2136:	8d 8f       	std	Y+29, r24	; 0x1d
    2138:	8d 8d       	ldd	r24, Y+29	; 0x1d
    213a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	f1 f7       	brne	.-4      	; 0x213c <LCD_voidWriteCmd+0x124>
    2140:	9e 8f       	std	Y+30, r25	; 0x1e
    2142:	8d 8f       	std	Y+29, r24	; 0x1d
    2144:	f0 c0       	rjmp	.+480    	; 0x2326 <LCD_voidWriteCmd+0x30e>
		_delay_ms(1);
	}
	else
	{
		voidWriteCmd(u8LcdIndxCpy ,u8CmdCpy);  
    2146:	8b a5       	ldd	r24, Y+43	; 0x2b
    2148:	6c a5       	ldd	r22, Y+44	; 0x2c
    214a:	0e 94 3f 13 	call	0x267e	; 0x267e <voidWriteCmd>
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	a0 e8       	ldi	r26, 0x80	; 128
    2154:	bf e3       	ldi	r27, 0x3F	; 63
    2156:	89 8f       	std	Y+25, r24	; 0x19
    2158:	9a 8f       	std	Y+26, r25	; 0x1a
    215a:	ab 8f       	std	Y+27, r26	; 0x1b
    215c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    215e:	69 8d       	ldd	r22, Y+25	; 0x19
    2160:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2162:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2164:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	4a ef       	ldi	r20, 0xFA	; 250
    216c:	54 e4       	ldi	r21, 0x44	; 68
    216e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2172:	dc 01       	movw	r26, r24
    2174:	cb 01       	movw	r24, r22
    2176:	8d 8b       	std	Y+21, r24	; 0x15
    2178:	9e 8b       	std	Y+22, r25	; 0x16
    217a:	af 8b       	std	Y+23, r26	; 0x17
    217c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    217e:	6d 89       	ldd	r22, Y+21	; 0x15
    2180:	7e 89       	ldd	r23, Y+22	; 0x16
    2182:	8f 89       	ldd	r24, Y+23	; 0x17
    2184:	98 8d       	ldd	r25, Y+24	; 0x18
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	40 e8       	ldi	r20, 0x80	; 128
    218c:	5f e3       	ldi	r21, 0x3F	; 63
    218e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2192:	88 23       	and	r24, r24
    2194:	2c f4       	brge	.+10     	; 0x21a0 <LCD_voidWriteCmd+0x188>
		__ticks = 1;
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	9c 8b       	std	Y+20, r25	; 0x14
    219c:	8b 8b       	std	Y+19, r24	; 0x13
    219e:	3f c0       	rjmp	.+126    	; 0x221e <LCD_voidWriteCmd+0x206>
	else if (__tmp > 65535)
    21a0:	6d 89       	ldd	r22, Y+21	; 0x15
    21a2:	7e 89       	ldd	r23, Y+22	; 0x16
    21a4:	8f 89       	ldd	r24, Y+23	; 0x17
    21a6:	98 8d       	ldd	r25, Y+24	; 0x18
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	3f ef       	ldi	r19, 0xFF	; 255
    21ac:	4f e7       	ldi	r20, 0x7F	; 127
    21ae:	57 e4       	ldi	r21, 0x47	; 71
    21b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21b4:	18 16       	cp	r1, r24
    21b6:	4c f5       	brge	.+82     	; 0x220a <LCD_voidWriteCmd+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21b8:	69 8d       	ldd	r22, Y+25	; 0x19
    21ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	40 e2       	ldi	r20, 0x20	; 32
    21c6:	51 e4       	ldi	r21, 0x41	; 65
    21c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	bc 01       	movw	r22, r24
    21d2:	cd 01       	movw	r24, r26
    21d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	9c 8b       	std	Y+20, r25	; 0x14
    21de:	8b 8b       	std	Y+19, r24	; 0x13
    21e0:	0f c0       	rjmp	.+30     	; 0x2200 <LCD_voidWriteCmd+0x1e8>
    21e2:	88 ec       	ldi	r24, 0xC8	; 200
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	9a 8b       	std	Y+18, r25	; 0x12
    21e8:	89 8b       	std	Y+17, r24	; 0x11
    21ea:	89 89       	ldd	r24, Y+17	; 0x11
    21ec:	9a 89       	ldd	r25, Y+18	; 0x12
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	f1 f7       	brne	.-4      	; 0x21ee <LCD_voidWriteCmd+0x1d6>
    21f2:	9a 8b       	std	Y+18, r25	; 0x12
    21f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f6:	8b 89       	ldd	r24, Y+19	; 0x13
    21f8:	9c 89       	ldd	r25, Y+20	; 0x14
    21fa:	01 97       	sbiw	r24, 0x01	; 1
    21fc:	9c 8b       	std	Y+20, r25	; 0x14
    21fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2200:	8b 89       	ldd	r24, Y+19	; 0x13
    2202:	9c 89       	ldd	r25, Y+20	; 0x14
    2204:	00 97       	sbiw	r24, 0x00	; 0
    2206:	69 f7       	brne	.-38     	; 0x21e2 <LCD_voidWriteCmd+0x1ca>
    2208:	14 c0       	rjmp	.+40     	; 0x2232 <LCD_voidWriteCmd+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    220a:	6d 89       	ldd	r22, Y+21	; 0x15
    220c:	7e 89       	ldd	r23, Y+22	; 0x16
    220e:	8f 89       	ldd	r24, Y+23	; 0x17
    2210:	98 8d       	ldd	r25, Y+24	; 0x18
    2212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	9c 8b       	std	Y+20, r25	; 0x14
    221c:	8b 8b       	std	Y+19, r24	; 0x13
    221e:	8b 89       	ldd	r24, Y+19	; 0x13
    2220:	9c 89       	ldd	r25, Y+20	; 0x14
    2222:	98 8b       	std	Y+16, r25	; 0x10
    2224:	8f 87       	std	Y+15, r24	; 0x0f
    2226:	8f 85       	ldd	r24, Y+15	; 0x0f
    2228:	98 89       	ldd	r25, Y+16	; 0x10
    222a:	01 97       	sbiw	r24, 0x01	; 1
    222c:	f1 f7       	brne	.-4      	; 0x222a <LCD_voidWriteCmd+0x212>
    222e:	98 8b       	std	Y+16, r25	; 0x10
    2230:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		voidWriteCmd(u8LcdIndxCpy ,u8CmdCpy<<4);
    2232:	8c a5       	ldd	r24, Y+44	; 0x2c
    2234:	98 2f       	mov	r25, r24
    2236:	92 95       	swap	r25
    2238:	90 7f       	andi	r25, 0xF0	; 240
    223a:	8b a5       	ldd	r24, Y+43	; 0x2b
    223c:	69 2f       	mov	r22, r25
    223e:	0e 94 3f 13 	call	0x267e	; 0x267e <voidWriteCmd>
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	a0 e8       	ldi	r26, 0x80	; 128
    2248:	bf e3       	ldi	r27, 0x3F	; 63
    224a:	8b 87       	std	Y+11, r24	; 0x0b
    224c:	9c 87       	std	Y+12, r25	; 0x0c
    224e:	ad 87       	std	Y+13, r26	; 0x0d
    2250:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2252:	6b 85       	ldd	r22, Y+11	; 0x0b
    2254:	7c 85       	ldd	r23, Y+12	; 0x0c
    2256:	8d 85       	ldd	r24, Y+13	; 0x0d
    2258:	9e 85       	ldd	r25, Y+14	; 0x0e
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	4a ef       	ldi	r20, 0xFA	; 250
    2260:	54 e4       	ldi	r21, 0x44	; 68
    2262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	8f 83       	std	Y+7, r24	; 0x07
    226c:	98 87       	std	Y+8, r25	; 0x08
    226e:	a9 87       	std	Y+9, r26	; 0x09
    2270:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2272:	6f 81       	ldd	r22, Y+7	; 0x07
    2274:	78 85       	ldd	r23, Y+8	; 0x08
    2276:	89 85       	ldd	r24, Y+9	; 0x09
    2278:	9a 85       	ldd	r25, Y+10	; 0x0a
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	40 e8       	ldi	r20, 0x80	; 128
    2280:	5f e3       	ldi	r21, 0x3F	; 63
    2282:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2286:	88 23       	and	r24, r24
    2288:	2c f4       	brge	.+10     	; 0x2294 <LCD_voidWriteCmd+0x27c>
		__ticks = 1;
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	9e 83       	std	Y+6, r25	; 0x06
    2290:	8d 83       	std	Y+5, r24	; 0x05
    2292:	3f c0       	rjmp	.+126    	; 0x2312 <LCD_voidWriteCmd+0x2fa>
	else if (__tmp > 65535)
    2294:	6f 81       	ldd	r22, Y+7	; 0x07
    2296:	78 85       	ldd	r23, Y+8	; 0x08
    2298:	89 85       	ldd	r24, Y+9	; 0x09
    229a:	9a 85       	ldd	r25, Y+10	; 0x0a
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	3f ef       	ldi	r19, 0xFF	; 255
    22a0:	4f e7       	ldi	r20, 0x7F	; 127
    22a2:	57 e4       	ldi	r21, 0x47	; 71
    22a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22a8:	18 16       	cp	r1, r24
    22aa:	4c f5       	brge	.+82     	; 0x22fe <LCD_voidWriteCmd+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	40 e2       	ldi	r20, 0x20	; 32
    22ba:	51 e4       	ldi	r21, 0x41	; 65
    22bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	bc 01       	movw	r22, r24
    22c6:	cd 01       	movw	r24, r26
    22c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	9e 83       	std	Y+6, r25	; 0x06
    22d2:	8d 83       	std	Y+5, r24	; 0x05
    22d4:	0f c0       	rjmp	.+30     	; 0x22f4 <LCD_voidWriteCmd+0x2dc>
    22d6:	88 ec       	ldi	r24, 0xC8	; 200
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	9c 83       	std	Y+4, r25	; 0x04
    22dc:	8b 83       	std	Y+3, r24	; 0x03
    22de:	8b 81       	ldd	r24, Y+3	; 0x03
    22e0:	9c 81       	ldd	r25, Y+4	; 0x04
    22e2:	01 97       	sbiw	r24, 0x01	; 1
    22e4:	f1 f7       	brne	.-4      	; 0x22e2 <LCD_voidWriteCmd+0x2ca>
    22e6:	9c 83       	std	Y+4, r25	; 0x04
    22e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ea:	8d 81       	ldd	r24, Y+5	; 0x05
    22ec:	9e 81       	ldd	r25, Y+6	; 0x06
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	9e 83       	std	Y+6, r25	; 0x06
    22f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f4:	8d 81       	ldd	r24, Y+5	; 0x05
    22f6:	9e 81       	ldd	r25, Y+6	; 0x06
    22f8:	00 97       	sbiw	r24, 0x00	; 0
    22fa:	69 f7       	brne	.-38     	; 0x22d6 <LCD_voidWriteCmd+0x2be>
    22fc:	14 c0       	rjmp	.+40     	; 0x2326 <LCD_voidWriteCmd+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2300:	78 85       	ldd	r23, Y+8	; 0x08
    2302:	89 85       	ldd	r24, Y+9	; 0x09
    2304:	9a 85       	ldd	r25, Y+10	; 0x0a
    2306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	9e 83       	std	Y+6, r25	; 0x06
    2310:	8d 83       	std	Y+5, r24	; 0x05
    2312:	8d 81       	ldd	r24, Y+5	; 0x05
    2314:	9e 81       	ldd	r25, Y+6	; 0x06
    2316:	9a 83       	std	Y+2, r25	; 0x02
    2318:	89 83       	std	Y+1, r24	; 0x01
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	9a 81       	ldd	r25, Y+2	; 0x02
    231e:	01 97       	sbiw	r24, 0x01	; 1
    2320:	f1 f7       	brne	.-4      	; 0x231e <LCD_voidWriteCmd+0x306>
    2322:	9a 83       	std	Y+2, r25	; 0x02
    2324:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	}
	
}
    2326:	ac 96       	adiw	r28, 0x2c	; 44
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	f8 94       	cli
    232c:	de bf       	out	0x3e, r29	; 62
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	cd bf       	out	0x3d, r28	; 61
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <LCD_voidDisplayChar>:

void LCD_voidDisplayChar(uint8 u8LcdIndxCpy , uint8 u8CharCpy)
{
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
    2340:	ac 97       	sbiw	r28, 0x2c	; 44
    2342:	0f b6       	in	r0, 0x3f	; 63
    2344:	f8 94       	cli
    2346:	de bf       	out	0x3e, r29	; 62
    2348:	0f be       	out	0x3f, r0	; 63
    234a:	cd bf       	out	0x3d, r28	; 61
    234c:	8b a7       	std	Y+43, r24	; 0x2b
    234e:	6c a7       	std	Y+44, r22	; 0x2c
	// Rs  1
	DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8Rs , DIO_HIGH );
    2350:	8b a5       	ldd	r24, Y+43	; 0x2b
    2352:	28 2f       	mov	r18, r24
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	c9 01       	movw	r24, r18
    2358:	88 0f       	add	r24, r24
    235a:	99 1f       	adc	r25, r25
    235c:	82 0f       	add	r24, r18
    235e:	93 1f       	adc	r25, r19
    2360:	88 0f       	add	r24, r24
    2362:	99 1f       	adc	r25, r25
    2364:	88 0f       	add	r24, r24
    2366:	99 1f       	adc	r25, r25
    2368:	fc 01       	movw	r30, r24
    236a:	e7 59       	subi	r30, 0x97	; 151
    236c:	ff 4f       	sbci	r31, 0xFF	; 255
    236e:	80 81       	ld	r24, Z
    2370:	61 e0       	ldi	r22, 0x01	; 1
    2372:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
	
	if (LCD_astrConfigSet[u8LcdIndxCpy].strLcdHwCfg.u8Mode  == LCD_8BIT_MODE )
    2376:	8b a5       	ldd	r24, Y+43	; 0x2b
    2378:	28 2f       	mov	r18, r24
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	c9 01       	movw	r24, r18
    237e:	88 0f       	add	r24, r24
    2380:	99 1f       	adc	r25, r25
    2382:	82 0f       	add	r24, r18
    2384:	93 1f       	adc	r25, r19
    2386:	88 0f       	add	r24, r24
    2388:	99 1f       	adc	r25, r25
    238a:	88 0f       	add	r24, r24
    238c:	99 1f       	adc	r25, r25
    238e:	fc 01       	movw	r30, r24
    2390:	e8 59       	subi	r30, 0x98	; 152
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	80 81       	ld	r24, Z
    2396:	81 70       	andi	r24, 0x01	; 1
    2398:	81 30       	cpi	r24, 0x01	; 1
    239a:	09 f0       	breq	.+2      	; 0x239e <LCD_voidDisplayChar+0x66>
    239c:	77 c0       	rjmp	.+238    	; 0x248c <LCD_voidDisplayChar+0x154>
	{
		voidLcdHelper(u8LcdIndxCpy , u8CharCpy);
    239e:	8b a5       	ldd	r24, Y+43	; 0x2b
    23a0:	6c a5       	ldd	r22, Y+44	; 0x2c
    23a2:	0e 94 62 13 	call	0x26c4	; 0x26c4 <voidLcdHelper>
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	a0 e8       	ldi	r26, 0x80	; 128
    23ac:	bf e3       	ldi	r27, 0x3F	; 63
    23ae:	8f a3       	std	Y+39, r24	; 0x27
    23b0:	98 a7       	std	Y+40, r25	; 0x28
    23b2:	a9 a7       	std	Y+41, r26	; 0x29
    23b4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b6:	6f a1       	ldd	r22, Y+39	; 0x27
    23b8:	78 a5       	ldd	r23, Y+40	; 0x28
    23ba:	89 a5       	ldd	r24, Y+41	; 0x29
    23bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	4a ef       	ldi	r20, 0xFA	; 250
    23c4:	54 e4       	ldi	r21, 0x44	; 68
    23c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	8b a3       	std	Y+35, r24	; 0x23
    23d0:	9c a3       	std	Y+36, r25	; 0x24
    23d2:	ad a3       	std	Y+37, r26	; 0x25
    23d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23d6:	6b a1       	ldd	r22, Y+35	; 0x23
    23d8:	7c a1       	ldd	r23, Y+36	; 0x24
    23da:	8d a1       	ldd	r24, Y+37	; 0x25
    23dc:	9e a1       	ldd	r25, Y+38	; 0x26
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 e8       	ldi	r20, 0x80	; 128
    23e4:	5f e3       	ldi	r21, 0x3F	; 63
    23e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ea:	88 23       	and	r24, r24
    23ec:	2c f4       	brge	.+10     	; 0x23f8 <LCD_voidDisplayChar+0xc0>
		__ticks = 1;
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	9a a3       	std	Y+34, r25	; 0x22
    23f4:	89 a3       	std	Y+33, r24	; 0x21
    23f6:	3f c0       	rjmp	.+126    	; 0x2476 <LCD_voidDisplayChar+0x13e>
	else if (__tmp > 65535)
    23f8:	6b a1       	ldd	r22, Y+35	; 0x23
    23fa:	7c a1       	ldd	r23, Y+36	; 0x24
    23fc:	8d a1       	ldd	r24, Y+37	; 0x25
    23fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	3f ef       	ldi	r19, 0xFF	; 255
    2404:	4f e7       	ldi	r20, 0x7F	; 127
    2406:	57 e4       	ldi	r21, 0x47	; 71
    2408:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    240c:	18 16       	cp	r1, r24
    240e:	4c f5       	brge	.+82     	; 0x2462 <LCD_voidDisplayChar+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2410:	6f a1       	ldd	r22, Y+39	; 0x27
    2412:	78 a5       	ldd	r23, Y+40	; 0x28
    2414:	89 a5       	ldd	r24, Y+41	; 0x29
    2416:	9a a5       	ldd	r25, Y+42	; 0x2a
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	40 e2       	ldi	r20, 0x20	; 32
    241e:	51 e4       	ldi	r21, 0x41	; 65
    2420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	bc 01       	movw	r22, r24
    242a:	cd 01       	movw	r24, r26
    242c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	9a a3       	std	Y+34, r25	; 0x22
    2436:	89 a3       	std	Y+33, r24	; 0x21
    2438:	0f c0       	rjmp	.+30     	; 0x2458 <LCD_voidDisplayChar+0x120>
    243a:	88 ec       	ldi	r24, 0xC8	; 200
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	98 a3       	std	Y+32, r25	; 0x20
    2440:	8f 8f       	std	Y+31, r24	; 0x1f
    2442:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2444:	98 a1       	ldd	r25, Y+32	; 0x20
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	f1 f7       	brne	.-4      	; 0x2446 <LCD_voidDisplayChar+0x10e>
    244a:	98 a3       	std	Y+32, r25	; 0x20
    244c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244e:	89 a1       	ldd	r24, Y+33	; 0x21
    2450:	9a a1       	ldd	r25, Y+34	; 0x22
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	9a a3       	std	Y+34, r25	; 0x22
    2456:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2458:	89 a1       	ldd	r24, Y+33	; 0x21
    245a:	9a a1       	ldd	r25, Y+34	; 0x22
    245c:	00 97       	sbiw	r24, 0x00	; 0
    245e:	69 f7       	brne	.-38     	; 0x243a <LCD_voidDisplayChar+0x102>
    2460:	05 c1       	rjmp	.+522    	; 0x266c <LCD_voidDisplayChar+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2462:	6b a1       	ldd	r22, Y+35	; 0x23
    2464:	7c a1       	ldd	r23, Y+36	; 0x24
    2466:	8d a1       	ldd	r24, Y+37	; 0x25
    2468:	9e a1       	ldd	r25, Y+38	; 0x26
    246a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	9a a3       	std	Y+34, r25	; 0x22
    2474:	89 a3       	std	Y+33, r24	; 0x21
    2476:	89 a1       	ldd	r24, Y+33	; 0x21
    2478:	9a a1       	ldd	r25, Y+34	; 0x22
    247a:	9e 8f       	std	Y+30, r25	; 0x1e
    247c:	8d 8f       	std	Y+29, r24	; 0x1d
    247e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2480:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2482:	01 97       	sbiw	r24, 0x01	; 1
    2484:	f1 f7       	brne	.-4      	; 0x2482 <LCD_voidDisplayChar+0x14a>
    2486:	9e 8f       	std	Y+30, r25	; 0x1e
    2488:	8d 8f       	std	Y+29, r24	; 0x1d
    248a:	f0 c0       	rjmp	.+480    	; 0x266c <LCD_voidDisplayChar+0x334>
		_delay_ms(1);
	}
	else
	{
		
		voidLcdHelper(u8LcdIndxCpy , u8CharCpy);  
    248c:	8b a5       	ldd	r24, Y+43	; 0x2b
    248e:	6c a5       	ldd	r22, Y+44	; 0x2c
    2490:	0e 94 62 13 	call	0x26c4	; 0x26c4 <voidLcdHelper>
    2494:	80 e0       	ldi	r24, 0x00	; 0
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	a0 e8       	ldi	r26, 0x80	; 128
    249a:	bf e3       	ldi	r27, 0x3F	; 63
    249c:	89 8f       	std	Y+25, r24	; 0x19
    249e:	9a 8f       	std	Y+26, r25	; 0x1a
    24a0:	ab 8f       	std	Y+27, r26	; 0x1b
    24a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a4:	69 8d       	ldd	r22, Y+25	; 0x19
    24a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	4a ef       	ldi	r20, 0xFA	; 250
    24b2:	54 e4       	ldi	r21, 0x44	; 68
    24b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	8d 8b       	std	Y+21, r24	; 0x15
    24be:	9e 8b       	std	Y+22, r25	; 0x16
    24c0:	af 8b       	std	Y+23, r26	; 0x17
    24c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24c4:	6d 89       	ldd	r22, Y+21	; 0x15
    24c6:	7e 89       	ldd	r23, Y+22	; 0x16
    24c8:	8f 89       	ldd	r24, Y+23	; 0x17
    24ca:	98 8d       	ldd	r25, Y+24	; 0x18
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e8       	ldi	r20, 0x80	; 128
    24d2:	5f e3       	ldi	r21, 0x3F	; 63
    24d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24d8:	88 23       	and	r24, r24
    24da:	2c f4       	brge	.+10     	; 0x24e6 <LCD_voidDisplayChar+0x1ae>
		__ticks = 1;
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	9c 8b       	std	Y+20, r25	; 0x14
    24e2:	8b 8b       	std	Y+19, r24	; 0x13
    24e4:	3f c0       	rjmp	.+126    	; 0x2564 <LCD_voidDisplayChar+0x22c>
	else if (__tmp > 65535)
    24e6:	6d 89       	ldd	r22, Y+21	; 0x15
    24e8:	7e 89       	ldd	r23, Y+22	; 0x16
    24ea:	8f 89       	ldd	r24, Y+23	; 0x17
    24ec:	98 8d       	ldd	r25, Y+24	; 0x18
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	3f ef       	ldi	r19, 0xFF	; 255
    24f2:	4f e7       	ldi	r20, 0x7F	; 127
    24f4:	57 e4       	ldi	r21, 0x47	; 71
    24f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24fa:	18 16       	cp	r1, r24
    24fc:	4c f5       	brge	.+82     	; 0x2550 <LCD_voidDisplayChar+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2500:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2502:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2504:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	40 e2       	ldi	r20, 0x20	; 32
    250c:	51 e4       	ldi	r21, 0x41	; 65
    250e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	bc 01       	movw	r22, r24
    2518:	cd 01       	movw	r24, r26
    251a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	9c 8b       	std	Y+20, r25	; 0x14
    2524:	8b 8b       	std	Y+19, r24	; 0x13
    2526:	0f c0       	rjmp	.+30     	; 0x2546 <LCD_voidDisplayChar+0x20e>
    2528:	88 ec       	ldi	r24, 0xC8	; 200
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	9a 8b       	std	Y+18, r25	; 0x12
    252e:	89 8b       	std	Y+17, r24	; 0x11
    2530:	89 89       	ldd	r24, Y+17	; 0x11
    2532:	9a 89       	ldd	r25, Y+18	; 0x12
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	f1 f7       	brne	.-4      	; 0x2534 <LCD_voidDisplayChar+0x1fc>
    2538:	9a 8b       	std	Y+18, r25	; 0x12
    253a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253c:	8b 89       	ldd	r24, Y+19	; 0x13
    253e:	9c 89       	ldd	r25, Y+20	; 0x14
    2540:	01 97       	sbiw	r24, 0x01	; 1
    2542:	9c 8b       	std	Y+20, r25	; 0x14
    2544:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2546:	8b 89       	ldd	r24, Y+19	; 0x13
    2548:	9c 89       	ldd	r25, Y+20	; 0x14
    254a:	00 97       	sbiw	r24, 0x00	; 0
    254c:	69 f7       	brne	.-38     	; 0x2528 <LCD_voidDisplayChar+0x1f0>
    254e:	14 c0       	rjmp	.+40     	; 0x2578 <LCD_voidDisplayChar+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2550:	6d 89       	ldd	r22, Y+21	; 0x15
    2552:	7e 89       	ldd	r23, Y+22	; 0x16
    2554:	8f 89       	ldd	r24, Y+23	; 0x17
    2556:	98 8d       	ldd	r25, Y+24	; 0x18
    2558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	9c 8b       	std	Y+20, r25	; 0x14
    2562:	8b 8b       	std	Y+19, r24	; 0x13
    2564:	8b 89       	ldd	r24, Y+19	; 0x13
    2566:	9c 89       	ldd	r25, Y+20	; 0x14
    2568:	98 8b       	std	Y+16, r25	; 0x10
    256a:	8f 87       	std	Y+15, r24	; 0x0f
    256c:	8f 85       	ldd	r24, Y+15	; 0x0f
    256e:	98 89       	ldd	r25, Y+16	; 0x10
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	f1 f7       	brne	.-4      	; 0x2570 <LCD_voidDisplayChar+0x238>
    2574:	98 8b       	std	Y+16, r25	; 0x10
    2576:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		voidLcdHelper(u8LcdIndxCpy , u8CharCpy<<4);
    2578:	8c a5       	ldd	r24, Y+44	; 0x2c
    257a:	98 2f       	mov	r25, r24
    257c:	92 95       	swap	r25
    257e:	90 7f       	andi	r25, 0xF0	; 240
    2580:	8b a5       	ldd	r24, Y+43	; 0x2b
    2582:	69 2f       	mov	r22, r25
    2584:	0e 94 62 13 	call	0x26c4	; 0x26c4 <voidLcdHelper>
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	a0 e8       	ldi	r26, 0x80	; 128
    258e:	bf e3       	ldi	r27, 0x3F	; 63
    2590:	8b 87       	std	Y+11, r24	; 0x0b
    2592:	9c 87       	std	Y+12, r25	; 0x0c
    2594:	ad 87       	std	Y+13, r26	; 0x0d
    2596:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2598:	6b 85       	ldd	r22, Y+11	; 0x0b
    259a:	7c 85       	ldd	r23, Y+12	; 0x0c
    259c:	8d 85       	ldd	r24, Y+13	; 0x0d
    259e:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	4a ef       	ldi	r20, 0xFA	; 250
    25a6:	54 e4       	ldi	r21, 0x44	; 68
    25a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	8f 83       	std	Y+7, r24	; 0x07
    25b2:	98 87       	std	Y+8, r25	; 0x08
    25b4:	a9 87       	std	Y+9, r26	; 0x09
    25b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25b8:	6f 81       	ldd	r22, Y+7	; 0x07
    25ba:	78 85       	ldd	r23, Y+8	; 0x08
    25bc:	89 85       	ldd	r24, Y+9	; 0x09
    25be:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	40 e8       	ldi	r20, 0x80	; 128
    25c6:	5f e3       	ldi	r21, 0x3F	; 63
    25c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25cc:	88 23       	and	r24, r24
    25ce:	2c f4       	brge	.+10     	; 0x25da <LCD_voidDisplayChar+0x2a2>
		__ticks = 1;
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	9e 83       	std	Y+6, r25	; 0x06
    25d6:	8d 83       	std	Y+5, r24	; 0x05
    25d8:	3f c0       	rjmp	.+126    	; 0x2658 <LCD_voidDisplayChar+0x320>
	else if (__tmp > 65535)
    25da:	6f 81       	ldd	r22, Y+7	; 0x07
    25dc:	78 85       	ldd	r23, Y+8	; 0x08
    25de:	89 85       	ldd	r24, Y+9	; 0x09
    25e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	3f ef       	ldi	r19, 0xFF	; 255
    25e6:	4f e7       	ldi	r20, 0x7F	; 127
    25e8:	57 e4       	ldi	r21, 0x47	; 71
    25ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ee:	18 16       	cp	r1, r24
    25f0:	4c f5       	brge	.+82     	; 0x2644 <LCD_voidDisplayChar+0x30c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	40 e2       	ldi	r20, 0x20	; 32
    2600:	51 e4       	ldi	r21, 0x41	; 65
    2602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2606:	dc 01       	movw	r26, r24
    2608:	cb 01       	movw	r24, r22
    260a:	bc 01       	movw	r22, r24
    260c:	cd 01       	movw	r24, r26
    260e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	9e 83       	std	Y+6, r25	; 0x06
    2618:	8d 83       	std	Y+5, r24	; 0x05
    261a:	0f c0       	rjmp	.+30     	; 0x263a <LCD_voidDisplayChar+0x302>
    261c:	88 ec       	ldi	r24, 0xC8	; 200
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	9c 83       	std	Y+4, r25	; 0x04
    2622:	8b 83       	std	Y+3, r24	; 0x03
    2624:	8b 81       	ldd	r24, Y+3	; 0x03
    2626:	9c 81       	ldd	r25, Y+4	; 0x04
    2628:	01 97       	sbiw	r24, 0x01	; 1
    262a:	f1 f7       	brne	.-4      	; 0x2628 <LCD_voidDisplayChar+0x2f0>
    262c:	9c 83       	std	Y+4, r25	; 0x04
    262e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2630:	8d 81       	ldd	r24, Y+5	; 0x05
    2632:	9e 81       	ldd	r25, Y+6	; 0x06
    2634:	01 97       	sbiw	r24, 0x01	; 1
    2636:	9e 83       	std	Y+6, r25	; 0x06
    2638:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263a:	8d 81       	ldd	r24, Y+5	; 0x05
    263c:	9e 81       	ldd	r25, Y+6	; 0x06
    263e:	00 97       	sbiw	r24, 0x00	; 0
    2640:	69 f7       	brne	.-38     	; 0x261c <LCD_voidDisplayChar+0x2e4>
    2642:	14 c0       	rjmp	.+40     	; 0x266c <LCD_voidDisplayChar+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2644:	6f 81       	ldd	r22, Y+7	; 0x07
    2646:	78 85       	ldd	r23, Y+8	; 0x08
    2648:	89 85       	ldd	r24, Y+9	; 0x09
    264a:	9a 85       	ldd	r25, Y+10	; 0x0a
    264c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	9e 83       	std	Y+6, r25	; 0x06
    2656:	8d 83       	std	Y+5, r24	; 0x05
    2658:	8d 81       	ldd	r24, Y+5	; 0x05
    265a:	9e 81       	ldd	r25, Y+6	; 0x06
    265c:	9a 83       	std	Y+2, r25	; 0x02
    265e:	89 83       	std	Y+1, r24	; 0x01
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	9a 81       	ldd	r25, Y+2	; 0x02
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	f1 f7       	brne	.-4      	; 0x2664 <LCD_voidDisplayChar+0x32c>
    2668:	9a 83       	std	Y+2, r25	; 0x02
    266a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	}
	
}
    266c:	ac 96       	adiw	r28, 0x2c	; 44
    266e:	0f b6       	in	r0, 0x3f	; 63
    2670:	f8 94       	cli
    2672:	de bf       	out	0x3e, r29	; 62
    2674:	0f be       	out	0x3f, r0	; 63
    2676:	cd bf       	out	0x3d, r28	; 61
    2678:	cf 91       	pop	r28
    267a:	df 91       	pop	r29
    267c:	08 95       	ret

0000267e <voidWriteCmd>:

static void voidWriteCmd(uint8 u8LcdIndxCpy , uint8 u8CmdCpy)
{
    267e:	df 93       	push	r29
    2680:	cf 93       	push	r28
    2682:	00 d0       	rcall	.+0      	; 0x2684 <voidWriteCmd+0x6>
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
    2688:	89 83       	std	Y+1, r24	; 0x01
    268a:	6a 83       	std	Y+2, r22	; 0x02
    // Rs  0
	DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8Rs , DIO_LOW );
    268c:	89 81       	ldd	r24, Y+1	; 0x01
    268e:	28 2f       	mov	r18, r24
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	c9 01       	movw	r24, r18
    2694:	88 0f       	add	r24, r24
    2696:	99 1f       	adc	r25, r25
    2698:	82 0f       	add	r24, r18
    269a:	93 1f       	adc	r25, r19
    269c:	88 0f       	add	r24, r24
    269e:	99 1f       	adc	r25, r25
    26a0:	88 0f       	add	r24, r24
    26a2:	99 1f       	adc	r25, r25
    26a4:	fc 01       	movw	r30, r24
    26a6:	e7 59       	subi	r30, 0x97	; 151
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	80 81       	ld	r24, Z
    26ac:	60 e0       	ldi	r22, 0x00	; 0
    26ae:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
	
	voidLcdHelper( u8LcdIndxCpy, u8CmdCpy);
    26b2:	89 81       	ldd	r24, Y+1	; 0x01
    26b4:	6a 81       	ldd	r22, Y+2	; 0x02
    26b6:	0e 94 62 13 	call	0x26c4	; 0x26c4 <voidLcdHelper>
	

}
    26ba:	0f 90       	pop	r0
    26bc:	0f 90       	pop	r0
    26be:	cf 91       	pop	r28
    26c0:	df 91       	pop	r29
    26c2:	08 95       	ret

000026c4 <voidLcdHelper>:

static void voidLcdHelper(uint8 u8LcdIndxCpy , uint8 u8CmdDataCpy)
{
    26c4:	df 93       	push	r29
    26c6:	cf 93       	push	r28
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
    26cc:	6f 97       	sbiw	r28, 0x1f	; 31
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	de bf       	out	0x3e, r29	; 62
    26d4:	0f be       	out	0x3f, r0	; 63
    26d6:	cd bf       	out	0x3d, r28	; 61
    26d8:	8e 8f       	std	Y+30, r24	; 0x1e
    26da:	6f 8f       	std	Y+31, r22	; 0x1f
	uint8 u8CntrLoc ;
	// RW  0
	DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8Rw , DIO_LOW );
    26dc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26de:	28 2f       	mov	r18, r24
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	c9 01       	movw	r24, r18
    26e4:	88 0f       	add	r24, r24
    26e6:	99 1f       	adc	r25, r25
    26e8:	82 0f       	add	r24, r18
    26ea:	93 1f       	adc	r25, r19
    26ec:	88 0f       	add	r24, r24
    26ee:	99 1f       	adc	r25, r25
    26f0:	01 96       	adiw	r24, 0x01	; 1
    26f2:	88 0f       	add	r24, r24
    26f4:	99 1f       	adc	r25, r25
    26f6:	fc 01       	movw	r30, r24
    26f8:	e8 59       	subi	r30, 0x98	; 152
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	80 81       	ld	r24, Z
    26fe:	60 e0       	ldi	r22, 0x00	; 0
    2700:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
	//latch start
	DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8En , DIO_HIGH );
    2704:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2706:	28 2f       	mov	r18, r24
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	c9 01       	movw	r24, r18
    270c:	88 0f       	add	r24, r24
    270e:	99 1f       	adc	r25, r25
    2710:	82 0f       	add	r24, r18
    2712:	93 1f       	adc	r25, r19
    2714:	88 0f       	add	r24, r24
    2716:	99 1f       	adc	r25, r25
    2718:	88 0f       	add	r24, r24
    271a:	99 1f       	adc	r25, r25
    271c:	fc 01       	movw	r30, r24
    271e:	e5 59       	subi	r30, 0x95	; 149
    2720:	ff 4f       	sbci	r31, 0xFF	; 255
    2722:	80 81       	ld	r24, Z
    2724:	61 e0       	ldi	r22, 0x01	; 1
    2726:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
	
	// check 4 bit 8
	if (LCD_astrConfigSet[u8LcdIndxCpy].strLcdHwCfg.u8Mode  == LCD_8BIT_MODE )
    272a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    272c:	28 2f       	mov	r18, r24
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	c9 01       	movw	r24, r18
    2732:	88 0f       	add	r24, r24
    2734:	99 1f       	adc	r25, r25
    2736:	82 0f       	add	r24, r18
    2738:	93 1f       	adc	r25, r19
    273a:	88 0f       	add	r24, r24
    273c:	99 1f       	adc	r25, r25
    273e:	88 0f       	add	r24, r24
    2740:	99 1f       	adc	r25, r25
    2742:	fc 01       	movw	r30, r24
    2744:	e8 59       	subi	r30, 0x98	; 152
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	80 81       	ld	r24, Z
    274a:	81 70       	andi	r24, 0x01	; 1
    274c:	81 30       	cpi	r24, 0x01	; 1
    274e:	89 f5       	brne	.+98     	; 0x27b2 <voidLcdHelper+0xee>
	{
		// send cmd or data 8 bit
		for (u8CntrLoc = 0; u8CntrLoc < 8 ; u8CntrLoc++)
    2750:	1d 8e       	std	Y+29, r1	; 0x1d
    2752:	2b c0       	rjmp	.+86     	; 0x27aa <voidLcdHelper+0xe6>
		{                   /* Rakm elselka                                                          cmd or data  */
			DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8Data[u8CntrLoc] , GET_BIT(u8CmdDataCpy,u8CntrLoc) );
    2754:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2756:	28 2f       	mov	r18, r24
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    275c:	48 2f       	mov	r20, r24
    275e:	50 e0       	ldi	r21, 0x00	; 0
    2760:	c9 01       	movw	r24, r18
    2762:	88 0f       	add	r24, r24
    2764:	99 1f       	adc	r25, r25
    2766:	82 0f       	add	r24, r18
    2768:	93 1f       	adc	r25, r19
    276a:	88 0f       	add	r24, r24
    276c:	99 1f       	adc	r25, r25
    276e:	88 0f       	add	r24, r24
    2770:	99 1f       	adc	r25, r25
    2772:	84 0f       	add	r24, r20
    2774:	95 1f       	adc	r25, r21
    2776:	fc 01       	movw	r30, r24
    2778:	e4 59       	subi	r30, 0x94	; 148
    277a:	ff 4f       	sbci	r31, 0xFF	; 255
    277c:	40 81       	ld	r20, Z
    277e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2780:	28 2f       	mov	r18, r24
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2786:	88 2f       	mov	r24, r24
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	b9 01       	movw	r22, r18
    278c:	02 c0       	rjmp	.+4      	; 0x2792 <voidLcdHelper+0xce>
    278e:	75 95       	asr	r23
    2790:	67 95       	ror	r22
    2792:	8a 95       	dec	r24
    2794:	e2 f7       	brpl	.-8      	; 0x278e <voidLcdHelper+0xca>
    2796:	cb 01       	movw	r24, r22
    2798:	98 2f       	mov	r25, r24
    279a:	91 70       	andi	r25, 0x01	; 1
    279c:	84 2f       	mov	r24, r20
    279e:	69 2f       	mov	r22, r25
    27a0:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
	
	// check 4 bit 8
	if (LCD_astrConfigSet[u8LcdIndxCpy].strLcdHwCfg.u8Mode  == LCD_8BIT_MODE )
	{
		// send cmd or data 8 bit
		for (u8CntrLoc = 0; u8CntrLoc < 8 ; u8CntrLoc++)
    27a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27a6:	8f 5f       	subi	r24, 0xFF	; 255
    27a8:	8d 8f       	std	Y+29, r24	; 0x1d
    27aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27ac:	88 30       	cpi	r24, 0x08	; 8
    27ae:	90 f2       	brcs	.-92     	; 0x2754 <voidLcdHelper+0x90>
    27b0:	31 c0       	rjmp	.+98     	; 0x2814 <voidLcdHelper+0x150>
		}
	}
	else
	{
		// send cmd or data 4 bit
		for (u8CntrLoc = 4; u8CntrLoc < 8 ; u8CntrLoc++)
    27b2:	84 e0       	ldi	r24, 0x04	; 4
    27b4:	8d 8f       	std	Y+29, r24	; 0x1d
    27b6:	2b c0       	rjmp	.+86     	; 0x280e <voidLcdHelper+0x14a>
		{
			DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8Data[u8CntrLoc] , GET_BIT(u8CmdDataCpy,u8CntrLoc) );
    27b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27ba:	28 2f       	mov	r18, r24
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27c0:	48 2f       	mov	r20, r24
    27c2:	50 e0       	ldi	r21, 0x00	; 0
    27c4:	c9 01       	movw	r24, r18
    27c6:	88 0f       	add	r24, r24
    27c8:	99 1f       	adc	r25, r25
    27ca:	82 0f       	add	r24, r18
    27cc:	93 1f       	adc	r25, r19
    27ce:	88 0f       	add	r24, r24
    27d0:	99 1f       	adc	r25, r25
    27d2:	88 0f       	add	r24, r24
    27d4:	99 1f       	adc	r25, r25
    27d6:	84 0f       	add	r24, r20
    27d8:	95 1f       	adc	r25, r21
    27da:	fc 01       	movw	r30, r24
    27dc:	e4 59       	subi	r30, 0x94	; 148
    27de:	ff 4f       	sbci	r31, 0xFF	; 255
    27e0:	40 81       	ld	r20, Z
    27e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27e4:	28 2f       	mov	r18, r24
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27ea:	88 2f       	mov	r24, r24
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	b9 01       	movw	r22, r18
    27f0:	02 c0       	rjmp	.+4      	; 0x27f6 <voidLcdHelper+0x132>
    27f2:	75 95       	asr	r23
    27f4:	67 95       	ror	r22
    27f6:	8a 95       	dec	r24
    27f8:	e2 f7       	brpl	.-8      	; 0x27f2 <voidLcdHelper+0x12e>
    27fa:	cb 01       	movw	r24, r22
    27fc:	98 2f       	mov	r25, r24
    27fe:	91 70       	andi	r25, 0x01	; 1
    2800:	84 2f       	mov	r24, r20
    2802:	69 2f       	mov	r22, r25
    2804:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
		}
	}
	else
	{
		// send cmd or data 4 bit
		for (u8CntrLoc = 4; u8CntrLoc < 8 ; u8CntrLoc++)
    2808:	8d 8d       	ldd	r24, Y+29	; 0x1d
    280a:	8f 5f       	subi	r24, 0xFF	; 255
    280c:	8d 8f       	std	Y+29, r24	; 0x1d
    280e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2810:	88 30       	cpi	r24, 0x08	; 8
    2812:	90 f2       	brcs	.-92     	; 0x27b8 <voidLcdHelper+0xf4>
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	a0 e2       	ldi	r26, 0x20	; 32
    281a:	b1 e4       	ldi	r27, 0x41	; 65
    281c:	89 8f       	std	Y+25, r24	; 0x19
    281e:	9a 8f       	std	Y+26, r25	; 0x1a
    2820:	ab 8f       	std	Y+27, r26	; 0x1b
    2822:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2824:	69 8d       	ldd	r22, Y+25	; 0x19
    2826:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2828:	8b 8d       	ldd	r24, Y+27	; 0x1b
    282a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	4a ef       	ldi	r20, 0xFA	; 250
    2832:	54 e4       	ldi	r21, 0x44	; 68
    2834:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	8d 8b       	std	Y+21, r24	; 0x15
    283e:	9e 8b       	std	Y+22, r25	; 0x16
    2840:	af 8b       	std	Y+23, r26	; 0x17
    2842:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2844:	6d 89       	ldd	r22, Y+21	; 0x15
    2846:	7e 89       	ldd	r23, Y+22	; 0x16
    2848:	8f 89       	ldd	r24, Y+23	; 0x17
    284a:	98 8d       	ldd	r25, Y+24	; 0x18
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	40 e8       	ldi	r20, 0x80	; 128
    2852:	5f e3       	ldi	r21, 0x3F	; 63
    2854:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2858:	88 23       	and	r24, r24
    285a:	2c f4       	brge	.+10     	; 0x2866 <voidLcdHelper+0x1a2>
		__ticks = 1;
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	9c 8b       	std	Y+20, r25	; 0x14
    2862:	8b 8b       	std	Y+19, r24	; 0x13
    2864:	3f c0       	rjmp	.+126    	; 0x28e4 <voidLcdHelper+0x220>
	else if (__tmp > 65535)
    2866:	6d 89       	ldd	r22, Y+21	; 0x15
    2868:	7e 89       	ldd	r23, Y+22	; 0x16
    286a:	8f 89       	ldd	r24, Y+23	; 0x17
    286c:	98 8d       	ldd	r25, Y+24	; 0x18
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	3f ef       	ldi	r19, 0xFF	; 255
    2872:	4f e7       	ldi	r20, 0x7F	; 127
    2874:	57 e4       	ldi	r21, 0x47	; 71
    2876:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    287a:	18 16       	cp	r1, r24
    287c:	4c f5       	brge	.+82     	; 0x28d0 <voidLcdHelper+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    287e:	69 8d       	ldd	r22, Y+25	; 0x19
    2880:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2882:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2884:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	40 e2       	ldi	r20, 0x20	; 32
    288c:	51 e4       	ldi	r21, 0x41	; 65
    288e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	bc 01       	movw	r22, r24
    2898:	cd 01       	movw	r24, r26
    289a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289e:	dc 01       	movw	r26, r24
    28a0:	cb 01       	movw	r24, r22
    28a2:	9c 8b       	std	Y+20, r25	; 0x14
    28a4:	8b 8b       	std	Y+19, r24	; 0x13
    28a6:	0f c0       	rjmp	.+30     	; 0x28c6 <voidLcdHelper+0x202>
    28a8:	88 ec       	ldi	r24, 0xC8	; 200
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	9a 8b       	std	Y+18, r25	; 0x12
    28ae:	89 8b       	std	Y+17, r24	; 0x11
    28b0:	89 89       	ldd	r24, Y+17	; 0x11
    28b2:	9a 89       	ldd	r25, Y+18	; 0x12
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	f1 f7       	brne	.-4      	; 0x28b4 <voidLcdHelper+0x1f0>
    28b8:	9a 8b       	std	Y+18, r25	; 0x12
    28ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28bc:	8b 89       	ldd	r24, Y+19	; 0x13
    28be:	9c 89       	ldd	r25, Y+20	; 0x14
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	9c 8b       	std	Y+20, r25	; 0x14
    28c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c6:	8b 89       	ldd	r24, Y+19	; 0x13
    28c8:	9c 89       	ldd	r25, Y+20	; 0x14
    28ca:	00 97       	sbiw	r24, 0x00	; 0
    28cc:	69 f7       	brne	.-38     	; 0x28a8 <voidLcdHelper+0x1e4>
    28ce:	14 c0       	rjmp	.+40     	; 0x28f8 <voidLcdHelper+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d0:	6d 89       	ldd	r22, Y+21	; 0x15
    28d2:	7e 89       	ldd	r23, Y+22	; 0x16
    28d4:	8f 89       	ldd	r24, Y+23	; 0x17
    28d6:	98 8d       	ldd	r25, Y+24	; 0x18
    28d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	9c 8b       	std	Y+20, r25	; 0x14
    28e2:	8b 8b       	std	Y+19, r24	; 0x13
    28e4:	8b 89       	ldd	r24, Y+19	; 0x13
    28e6:	9c 89       	ldd	r25, Y+20	; 0x14
    28e8:	98 8b       	std	Y+16, r25	; 0x10
    28ea:	8f 87       	std	Y+15, r24	; 0x0f
    28ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    28ee:	98 89       	ldd	r25, Y+16	; 0x10
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	f1 f7       	brne	.-4      	; 0x28f0 <voidLcdHelper+0x22c>
    28f4:	98 8b       	std	Y+16, r25	; 0x10
    28f6:	8f 87       	std	Y+15, r24	; 0x0f
		}
	}
	
	//latch
	_delay_ms(10);
	DIO_enuWritePin(LCD_astrConfigSet[u8LcdIndxCpy].strLcdConnectionCfg.u8En , DIO_LOW );
    28f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28fa:	28 2f       	mov	r18, r24
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	c9 01       	movw	r24, r18
    2900:	88 0f       	add	r24, r24
    2902:	99 1f       	adc	r25, r25
    2904:	82 0f       	add	r24, r18
    2906:	93 1f       	adc	r25, r19
    2908:	88 0f       	add	r24, r24
    290a:	99 1f       	adc	r25, r25
    290c:	88 0f       	add	r24, r24
    290e:	99 1f       	adc	r25, r25
    2910:	fc 01       	movw	r30, r24
    2912:	e5 59       	subi	r30, 0x95	; 149
    2914:	ff 4f       	sbci	r31, 0xFF	; 255
    2916:	80 81       	ld	r24, Z
    2918:	60 e0       	ldi	r22, 0x00	; 0
    291a:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_enuWritePin>
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	a0 e2       	ldi	r26, 0x20	; 32
    2924:	b1 e4       	ldi	r27, 0x41	; 65
    2926:	8b 87       	std	Y+11, r24	; 0x0b
    2928:	9c 87       	std	Y+12, r25	; 0x0c
    292a:	ad 87       	std	Y+13, r26	; 0x0d
    292c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    292e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2930:	7c 85       	ldd	r23, Y+12	; 0x0c
    2932:	8d 85       	ldd	r24, Y+13	; 0x0d
    2934:	9e 85       	ldd	r25, Y+14	; 0x0e
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	4a ef       	ldi	r20, 0xFA	; 250
    293c:	54 e4       	ldi	r21, 0x44	; 68
    293e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2942:	dc 01       	movw	r26, r24
    2944:	cb 01       	movw	r24, r22
    2946:	8f 83       	std	Y+7, r24	; 0x07
    2948:	98 87       	std	Y+8, r25	; 0x08
    294a:	a9 87       	std	Y+9, r26	; 0x09
    294c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    294e:	6f 81       	ldd	r22, Y+7	; 0x07
    2950:	78 85       	ldd	r23, Y+8	; 0x08
    2952:	89 85       	ldd	r24, Y+9	; 0x09
    2954:	9a 85       	ldd	r25, Y+10	; 0x0a
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	40 e8       	ldi	r20, 0x80	; 128
    295c:	5f e3       	ldi	r21, 0x3F	; 63
    295e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2962:	88 23       	and	r24, r24
    2964:	2c f4       	brge	.+10     	; 0x2970 <voidLcdHelper+0x2ac>
		__ticks = 1;
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	9e 83       	std	Y+6, r25	; 0x06
    296c:	8d 83       	std	Y+5, r24	; 0x05
    296e:	3f c0       	rjmp	.+126    	; 0x29ee <voidLcdHelper+0x32a>
	else if (__tmp > 65535)
    2970:	6f 81       	ldd	r22, Y+7	; 0x07
    2972:	78 85       	ldd	r23, Y+8	; 0x08
    2974:	89 85       	ldd	r24, Y+9	; 0x09
    2976:	9a 85       	ldd	r25, Y+10	; 0x0a
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	3f ef       	ldi	r19, 0xFF	; 255
    297c:	4f e7       	ldi	r20, 0x7F	; 127
    297e:	57 e4       	ldi	r21, 0x47	; 71
    2980:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2984:	18 16       	cp	r1, r24
    2986:	4c f5       	brge	.+82     	; 0x29da <voidLcdHelper+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2988:	6b 85       	ldd	r22, Y+11	; 0x0b
    298a:	7c 85       	ldd	r23, Y+12	; 0x0c
    298c:	8d 85       	ldd	r24, Y+13	; 0x0d
    298e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	40 e2       	ldi	r20, 0x20	; 32
    2996:	51 e4       	ldi	r21, 0x41	; 65
    2998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	bc 01       	movw	r22, r24
    29a2:	cd 01       	movw	r24, r26
    29a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	9e 83       	std	Y+6, r25	; 0x06
    29ae:	8d 83       	std	Y+5, r24	; 0x05
    29b0:	0f c0       	rjmp	.+30     	; 0x29d0 <voidLcdHelper+0x30c>
    29b2:	88 ec       	ldi	r24, 0xC8	; 200
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	9c 83       	std	Y+4, r25	; 0x04
    29b8:	8b 83       	std	Y+3, r24	; 0x03
    29ba:	8b 81       	ldd	r24, Y+3	; 0x03
    29bc:	9c 81       	ldd	r25, Y+4	; 0x04
    29be:	01 97       	sbiw	r24, 0x01	; 1
    29c0:	f1 f7       	brne	.-4      	; 0x29be <voidLcdHelper+0x2fa>
    29c2:	9c 83       	std	Y+4, r25	; 0x04
    29c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c6:	8d 81       	ldd	r24, Y+5	; 0x05
    29c8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ca:	01 97       	sbiw	r24, 0x01	; 1
    29cc:	9e 83       	std	Y+6, r25	; 0x06
    29ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d0:	8d 81       	ldd	r24, Y+5	; 0x05
    29d2:	9e 81       	ldd	r25, Y+6	; 0x06
    29d4:	00 97       	sbiw	r24, 0x00	; 0
    29d6:	69 f7       	brne	.-38     	; 0x29b2 <voidLcdHelper+0x2ee>
    29d8:	14 c0       	rjmp	.+40     	; 0x2a02 <voidLcdHelper+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29da:	6f 81       	ldd	r22, Y+7	; 0x07
    29dc:	78 85       	ldd	r23, Y+8	; 0x08
    29de:	89 85       	ldd	r24, Y+9	; 0x09
    29e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e6:	dc 01       	movw	r26, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	9e 83       	std	Y+6, r25	; 0x06
    29ec:	8d 83       	std	Y+5, r24	; 0x05
    29ee:	8d 81       	ldd	r24, Y+5	; 0x05
    29f0:	9e 81       	ldd	r25, Y+6	; 0x06
    29f2:	9a 83       	std	Y+2, r25	; 0x02
    29f4:	89 83       	std	Y+1, r24	; 0x01
    29f6:	89 81       	ldd	r24, Y+1	; 0x01
    29f8:	9a 81       	ldd	r25, Y+2	; 0x02
    29fa:	01 97       	sbiw	r24, 0x01	; 1
    29fc:	f1 f7       	brne	.-4      	; 0x29fa <voidLcdHelper+0x336>
    29fe:	9a 83       	std	Y+2, r25	; 0x02
    2a00:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	
}
    2a02:	6f 96       	adiw	r28, 0x1f	; 31
    2a04:	0f b6       	in	r0, 0x3f	; 63
    2a06:	f8 94       	cli
    2a08:	de bf       	out	0x3e, r29	; 62
    2a0a:	0f be       	out	0x3f, r0	; 63
    2a0c:	cd bf       	out	0x3d, r28	; 61
    2a0e:	cf 91       	pop	r28
    2a10:	df 91       	pop	r29
    2a12:	08 95       	ret

00002a14 <SPI_voidInitSlave>:
	return SPDR ;
}

#else
void SPI_voidInitSlave(void)
{
    2a14:	df 93       	push	r29
    2a16:	cf 93       	push	r28
    2a18:	00 d0       	rcall	.+0      	; 0x2a1a <SPI_voidInitSlave+0x6>
    2a1a:	cd b7       	in	r28, 0x3d	; 61
    2a1c:	de b7       	in	r29, 0x3e	; 62
	uint8 u8SPCR = 0b01000000;
    2a1e:	80 e4       	ldi	r24, 0x40	; 64
    2a20:	8a 83       	std	Y+2, r24	; 0x02
	uint8 u8SPSR = 0;
    2a22:	19 82       	std	Y+1, r1	; 0x01
	#if SPI_DATA_ORDER ==LSB
	SET_BIT(u8SPCR , 5);
    2a24:	8a 81       	ldd	r24, Y+2	; 0x02
    2a26:	80 62       	ori	r24, 0x20	; 32
    2a28:	8a 83       	std	Y+2, r24	; 0x02
	#else
	CLR_BIT(u8SPCR , 5);	
	#endif
	#if SPI_CLK_IDLE_STATE == CLK_IDLE_LOW 
	CLR_BIT(u8SPCR , 3);
    2a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2c:	87 7f       	andi	r24, 0xF7	; 247
    2a2e:	8a 83       	std	Y+2, r24	; 0x02
	#else
	SET_BIT(u8SPCR , 3);	
	#endif
	
	#if SPI_CLK_PHASE == SETUP_TRL
	CLR_BIT(u8SPCR , 2);
    2a30:	8a 81       	ldd	r24, Y+2	; 0x02
    2a32:	8b 7f       	andi	r24, 0xFB	; 251
    2a34:	8a 83       	std	Y+2, r24	; 0x02
	#else
	SET_BIT(u8SPCR , 2);
	#endif
	
SPCR = u8SPCR ;
    2a36:	ed e2       	ldi	r30, 0x2D	; 45
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3c:	80 83       	st	Z, r24
SPSR = u8SPSR ;
    2a3e:	ee e2       	ldi	r30, 0x2E	; 46
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	89 81       	ldd	r24, Y+1	; 0x01
    2a44:	80 83       	st	Z, r24
SPDR = '8';
    2a46:	ef e2       	ldi	r30, 0x2F	; 47
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	88 e3       	ldi	r24, 0x38	; 56
    2a4c:	80 83       	st	Z, r24
	

	
}
    2a4e:	0f 90       	pop	r0
    2a50:	0f 90       	pop	r0
    2a52:	cf 91       	pop	r28
    2a54:	df 91       	pop	r29
    2a56:	08 95       	ret

00002a58 <SPI_u8SlaveSend>:

void SPI_u8SlaveSend(uint8 u8DataCpy)
{
    2a58:	df 93       	push	r29
    2a5a:	cf 93       	push	r28
    2a5c:	0f 92       	push	r0
    2a5e:	cd b7       	in	r28, 0x3d	; 61
    2a60:	de b7       	in	r29, 0x3e	; 62
    2a62:	89 83       	std	Y+1, r24	; 0x01
	if (SPI_enuStatus == IDLE)
    2a64:	80 91 75 00 	lds	r24, 0x0075
    2a68:	81 30       	cpi	r24, 0x01	; 1
    2a6a:	39 f4       	brne	.+14     	; 0x2a7a <SPI_u8SlaveSend+0x22>
	{
		SPDR  = u8DataCpy ;
    2a6c:	ef e2       	ldi	r30, 0x2F	; 47
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
    2a72:	80 83       	st	Z, r24
		SPI_enuStatus = IN_PROGRESS ;
    2a74:	82 e0       	ldi	r24, 0x02	; 2
    2a76:	80 93 75 00 	sts	0x0075, r24
	}
	else
	{
		/*DoNothing*/
	}
}
    2a7a:	0f 90       	pop	r0
    2a7c:	cf 91       	pop	r28
    2a7e:	df 91       	pop	r29
    2a80:	08 95       	ret

00002a82 <SPI_u8SlaveReceive>:

uint8 SPI_u8SlaveReceive(void)
{
    2a82:	df 93       	push	r29
    2a84:	cf 93       	push	r28
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
	SPDR='8';
    2a8a:	ef e2       	ldi	r30, 0x2F	; 47
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	88 e3       	ldi	r24, 0x38	; 56
    2a90:	80 83       	st	Z, r24
	while(!(SPSR & (1<<7)));
    2a92:	ee e2       	ldi	r30, 0x2E	; 46
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	80 81       	ld	r24, Z
    2a98:	88 23       	and	r24, r24
    2a9a:	dc f7       	brge	.-10     	; 0x2a92 <SPI_u8SlaveReceive+0x10>
	    return SPDR ;
    2a9c:	ef e2       	ldi	r30, 0x2F	; 47
    2a9e:	f0 e0       	ldi	r31, 0x00	; 0
    2aa0:	80 81       	ld	r24, Z
}
    2aa2:	cf 91       	pop	r28
    2aa4:	df 91       	pop	r29
    2aa6:	08 95       	ret

00002aa8 <SPI_voidEnableInt>:

#endif

void SPI_voidEnableInt(void)
{
    2aa8:	df 93       	push	r29
    2aaa:	cf 93       	push	r28
    2aac:	cd b7       	in	r28, 0x3d	; 61
    2aae:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR,7);
    2ab0:	ad e2       	ldi	r26, 0x2D	; 45
    2ab2:	b0 e0       	ldi	r27, 0x00	; 0
    2ab4:	ed e2       	ldi	r30, 0x2D	; 45
    2ab6:	f0 e0       	ldi	r31, 0x00	; 0
    2ab8:	80 81       	ld	r24, Z
    2aba:	80 68       	ori	r24, 0x80	; 128
    2abc:	8c 93       	st	X, r24
}
    2abe:	cf 91       	pop	r28
    2ac0:	df 91       	pop	r29
    2ac2:	08 95       	ret

00002ac4 <SPI_voidDisableInt>:
void SPI_voidDisableInt(void)
{
    2ac4:	df 93       	push	r29
    2ac6:	cf 93       	push	r28
    2ac8:	cd b7       	in	r28, 0x3d	; 61
    2aca:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPCR,7);
    2acc:	ad e2       	ldi	r26, 0x2D	; 45
    2ace:	b0 e0       	ldi	r27, 0x00	; 0
    2ad0:	ed e2       	ldi	r30, 0x2D	; 45
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	80 81       	ld	r24, Z
    2ad6:	8f 77       	andi	r24, 0x7F	; 127
    2ad8:	8c 93       	st	X, r24
}
    2ada:	cf 91       	pop	r28
    2adc:	df 91       	pop	r29
    2ade:	08 95       	ret

00002ae0 <SPI_voidSendAsync>:
void SPI_voidSendAsync(uint8 u8DataCpy)
{
    2ae0:	df 93       	push	r29
    2ae2:	cf 93       	push	r28
    2ae4:	0f 92       	push	r0
    2ae6:	cd b7       	in	r28, 0x3d	; 61
    2ae8:	de b7       	in	r29, 0x3e	; 62
    2aea:	89 83       	std	Y+1, r24	; 0x01
	if (SPI_enuStatus == IDLE)
    2aec:	80 91 75 00 	lds	r24, 0x0075
    2af0:	81 30       	cpi	r24, 0x01	; 1
    2af2:	39 f4       	brne	.+14     	; 0x2b02 <SPI_voidSendAsync+0x22>
	{
		SPDR  = u8DataCpy ;
    2af4:	ef e2       	ldi	r30, 0x2F	; 47
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	89 81       	ldd	r24, Y+1	; 0x01
    2afa:	80 83       	st	Z, r24
		SPI_enuStatus = IN_PROGRESS ;
    2afc:	82 e0       	ldi	r24, 0x02	; 2
    2afe:	80 93 75 00 	sts	0x0075, r24
	}
	else
	{
		/*DoNothing*/
	}
}
    2b02:	0f 90       	pop	r0
    2b04:	cf 91       	pop	r28
    2b06:	df 91       	pop	r29
    2b08:	08 95       	ret

00002b0a <SPI_u8ReceiveAsync>:
tSpiStatus SPI_u8ReceiveAsync(uint8 *pu8ReciveDataCpy)
{
    2b0a:	df 93       	push	r29
    2b0c:	cf 93       	push	r28
    2b0e:	00 d0       	rcall	.+0      	; 0x2b10 <SPI_u8ReceiveAsync+0x6>
    2b10:	cd b7       	in	r28, 0x3d	; 61
    2b12:	de b7       	in	r29, 0x3e	; 62
    2b14:	9a 83       	std	Y+2, r25	; 0x02
    2b16:	89 83       	std	Y+1, r24	; 0x01
	*pu8ReciveDataCpy =  SPI_u8ReceiveBuffer ;
    2b18:	80 91 74 00 	lds	r24, 0x0074
    2b1c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b1e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b20:	80 83       	st	Z, r24
	return SPI_enuStatus ;
    2b22:	80 91 75 00 	lds	r24, 0x0075
}
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	cf 91       	pop	r28
    2b2c:	df 91       	pop	r29
    2b2e:	08 95       	ret

00002b30 <__vector_12>:
void __vector_12 (void) __attribute__ ((signal ,used));
void __vector_12 (void)
{
    2b30:	1f 92       	push	r1
    2b32:	0f 92       	push	r0
    2b34:	0f b6       	in	r0, 0x3f	; 63
    2b36:	0f 92       	push	r0
    2b38:	11 24       	eor	r1, r1
    2b3a:	8f 93       	push	r24
    2b3c:	ef 93       	push	r30
    2b3e:	ff 93       	push	r31
    2b40:	df 93       	push	r29
    2b42:	cf 93       	push	r28
    2b44:	cd b7       	in	r28, 0x3d	; 61
    2b46:	de b7       	in	r29, 0x3e	; 62
	SPI_u8ReceiveBuffer = SPDR ;
    2b48:	ef e2       	ldi	r30, 0x2F	; 47
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	80 81       	ld	r24, Z
    2b4e:	80 93 74 00 	sts	0x0074, r24
	SPI_enuStatus = IDLE ;
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	80 93 75 00 	sts	0x0075, r24
}
    2b58:	cf 91       	pop	r28
    2b5a:	df 91       	pop	r29
    2b5c:	ff 91       	pop	r31
    2b5e:	ef 91       	pop	r30
    2b60:	8f 91       	pop	r24
    2b62:	0f 90       	pop	r0
    2b64:	0f be       	out	0x3f, r0	; 63
    2b66:	0f 90       	pop	r0
    2b68:	1f 90       	pop	r1
    2b6a:	18 95       	reti

00002b6c <main>:
#include "SPI.h"
#include "LCD.h"
#include "util/delay.h"

int main(void)
{
    2b6c:	df 93       	push	r29
    2b6e:	cf 93       	push	r28
    2b70:	0f 92       	push	r0
    2b72:	cd b7       	in	r28, 0x3d	; 61
    2b74:	de b7       	in	r29, 0x3e	; 62
	uint8 Local_u16Receive ;
    DIO_voidInit();
    2b76:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidInit>
	SPI_voidInitSlave();
    2b7a:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <SPI_voidInitSlave>
    LCD_voidInit();
    2b7e:	0e 94 bf 07 	call	0xf7e	; 0xf7e <LCD_voidInit>

	while(1)
	{


		Local_u16Receive = SPI_u8SlaveReceive();
    2b82:	0e 94 41 15 	call	0x2a82	; 0x2a82 <SPI_u8SlaveReceive>
    2b86:	89 83       	std	Y+1, r24	; 0x01
	//	if(Local_u16Receive==5)
	//	LCD_voidDisplayChar(0,Local_u16Receive);
	//	else
		LCD_voidDisplayChar(0,(Local_u16Receive/2));
    2b88:	89 81       	ldd	r24, Y+1	; 0x01
    2b8a:	98 2f       	mov	r25, r24
    2b8c:	96 95       	lsr	r25
    2b8e:	80 e0       	ldi	r24, 0x00	; 0
    2b90:	69 2f       	mov	r22, r25
    2b92:	0e 94 9c 11 	call	0x2338	; 0x2338 <LCD_voidDisplayChar>
    2b96:	f5 cf       	rjmp	.-22     	; 0x2b82 <main+0x16>

00002b98 <__prologue_saves__>:
    2b98:	2f 92       	push	r2
    2b9a:	3f 92       	push	r3
    2b9c:	4f 92       	push	r4
    2b9e:	5f 92       	push	r5
    2ba0:	6f 92       	push	r6
    2ba2:	7f 92       	push	r7
    2ba4:	8f 92       	push	r8
    2ba6:	9f 92       	push	r9
    2ba8:	af 92       	push	r10
    2baa:	bf 92       	push	r11
    2bac:	cf 92       	push	r12
    2bae:	df 92       	push	r13
    2bb0:	ef 92       	push	r14
    2bb2:	ff 92       	push	r15
    2bb4:	0f 93       	push	r16
    2bb6:	1f 93       	push	r17
    2bb8:	cf 93       	push	r28
    2bba:	df 93       	push	r29
    2bbc:	cd b7       	in	r28, 0x3d	; 61
    2bbe:	de b7       	in	r29, 0x3e	; 62
    2bc0:	ca 1b       	sub	r28, r26
    2bc2:	db 0b       	sbc	r29, r27
    2bc4:	0f b6       	in	r0, 0x3f	; 63
    2bc6:	f8 94       	cli
    2bc8:	de bf       	out	0x3e, r29	; 62
    2bca:	0f be       	out	0x3f, r0	; 63
    2bcc:	cd bf       	out	0x3d, r28	; 61
    2bce:	09 94       	ijmp

00002bd0 <__epilogue_restores__>:
    2bd0:	2a 88       	ldd	r2, Y+18	; 0x12
    2bd2:	39 88       	ldd	r3, Y+17	; 0x11
    2bd4:	48 88       	ldd	r4, Y+16	; 0x10
    2bd6:	5f 84       	ldd	r5, Y+15	; 0x0f
    2bd8:	6e 84       	ldd	r6, Y+14	; 0x0e
    2bda:	7d 84       	ldd	r7, Y+13	; 0x0d
    2bdc:	8c 84       	ldd	r8, Y+12	; 0x0c
    2bde:	9b 84       	ldd	r9, Y+11	; 0x0b
    2be0:	aa 84       	ldd	r10, Y+10	; 0x0a
    2be2:	b9 84       	ldd	r11, Y+9	; 0x09
    2be4:	c8 84       	ldd	r12, Y+8	; 0x08
    2be6:	df 80       	ldd	r13, Y+7	; 0x07
    2be8:	ee 80       	ldd	r14, Y+6	; 0x06
    2bea:	fd 80       	ldd	r15, Y+5	; 0x05
    2bec:	0c 81       	ldd	r16, Y+4	; 0x04
    2bee:	1b 81       	ldd	r17, Y+3	; 0x03
    2bf0:	aa 81       	ldd	r26, Y+2	; 0x02
    2bf2:	b9 81       	ldd	r27, Y+1	; 0x01
    2bf4:	ce 0f       	add	r28, r30
    2bf6:	d1 1d       	adc	r29, r1
    2bf8:	0f b6       	in	r0, 0x3f	; 63
    2bfa:	f8 94       	cli
    2bfc:	de bf       	out	0x3e, r29	; 62
    2bfe:	0f be       	out	0x3f, r0	; 63
    2c00:	cd bf       	out	0x3d, r28	; 61
    2c02:	ed 01       	movw	r28, r26
    2c04:	08 95       	ret

00002c06 <_exit>:
    2c06:	f8 94       	cli

00002c08 <__stop_program>:
    2c08:	ff cf       	rjmp	.-2      	; 0x2c08 <__stop_program>
